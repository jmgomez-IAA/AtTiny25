
AVR-TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000045c  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000004f0  2**0
                  ALLOC
  3 .stab         00001df4  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001020  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000020  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1b c0       	rjmp	.+54     	; 0x3c <__vector_2>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	41 c0       	rjmp	.+130    	; 0x8e <__vector_5>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_clear_bss>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	01 c0       	rjmp	.+2      	; 0x30 <.do_clear_bss_start>

0000002e <.do_clear_bss_loop>:
  2e:	1d 92       	st	X+, r1

00000030 <.do_clear_bss_start>:
  30:	a1 36       	cpi	r26, 0x61	; 97
  32:	b1 07       	cpc	r27, r17
  34:	e1 f7       	brne	.-8      	; 0x2e <.do_clear_bss_loop>
  36:	52 d0       	rcall	.+164    	; 0xdc <main>
  38:	0f c2       	rjmp	.+1054   	; 0x458 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <__vector_2>:
 *  There are 2 sources for external GPIO interrupt. INT0 and PCINT0[5..0].
 *  PCINT0[5..0] -> Pin change asynchronous interrupt, trigger when pin toggles. The PCMSK register control which pins INT is enabled.
 *  INT0, interrupt level, triggers when the pin is in a level.
 **/

ISR(PCINT0_vect){
  3c:	1f 92       	push	r1
  3e:	0f 92       	push	r0
  40:	00 90 5f 00 	lds	r0, 0x005F
  44:	0f 92       	push	r0
  46:	11 24       	eor	r1, r1
  48:	2f 93       	push	r18
  4a:	3f 93       	push	r19
  4c:	8f 93       	push	r24
  4e:	9f 93       	push	r25
  50:	ef 93       	push	r30
  52:	ff 93       	push	r31
  54:	cf 93       	push	r28
  56:	df 93       	push	r29
  58:	cd b7       	in	r28, 0x3d	; 61
  5a:	dd 27       	eor	r29, r29

	//Check whihc is interrupt source
	//if (GIFR & 0x10){
	PORTB = ~(PINB & 0x08);
  5c:	88 e3       	ldi	r24, 0x38	; 56
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	26 e3       	ldi	r18, 0x36	; 54
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	f9 01       	movw	r30, r18
  66:	20 81       	ld	r18, Z
  68:	28 70       	andi	r18, 0x08	; 8
  6a:	20 95       	com	r18
  6c:	fc 01       	movw	r30, r24
  6e:	20 83       	st	Z, r18
	//}

	return;
  70:	00 00       	nop
}
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	ff 91       	pop	r31
  78:	ef 91       	pop	r30
  7a:	9f 91       	pop	r25
  7c:	8f 91       	pop	r24
  7e:	3f 91       	pop	r19
  80:	2f 91       	pop	r18
  82:	0f 90       	pop	r0
  84:	00 92 5f 00 	sts	0x005F, r0
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <__vector_5>:

ISR(TIMER0_OVF_vect){
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	00 90 5f 00 	lds	r0, 0x005F
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	dd 27       	eor	r29, r29

	PORTB &= ~(0x08);
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	28 e3       	ldi	r18, 0x38	; 56
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	27 7f       	andi	r18, 0xF7	; 247
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	ff 91       	pop	r31
  c6:	ef 91       	pop	r30
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	3f 91       	pop	r19
  ce:	2f 91       	pop	r18
  d0:	0f 90       	pop	r0
  d2:	00 92 5f 00 	sts	0x005F, r0
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <main>:


int main(void){
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	dd 27       	eor	r29, r29
  e4:	ce 50       	subi	r28, 0x0E	; 14
  e6:	cd bf       	out	0x3d, r28	; 61


	//En primer lugar, deshabilitamos las interrupciones globales.
	// Recuerda que para volver a activarlas se usa la función sei().
	cli();
  e8:	f8 94       	cli

	buttomValue = 0;
  ea:	10 92 60 00 	sts	0x0060, r1

	/*Configure PORT direction*/

	// If DDRxn is  0 (input), and PORTxn is 1 => pull-up enable. Verify Bit 6 – PUD: Pull-up Disable of MCUCR – MCU Control Register
	DDRB |=1<<PB3 | 0<<PB4;  //PB3 is output pin  & PB4 is input pin with pull-up.
  ee:	87 e3       	ldi	r24, 0x37	; 55
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	27 e3       	ldi	r18, 0x37	; 55
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	28 60       	ori	r18, 0x08	; 8
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	PORTB |= 1<<PB3 | 1<<PB4;	// Set output high.
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	28 e3       	ldi	r18, 0x38	; 56
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	28 61       	ori	r18, 0x18	; 24
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18

	/*Configure Interrupts*/
	//Enable Pin PB4 interrupt, mask the rest.
	PCMSK = 0x10;
 112:	85 e3       	ldi	r24, 0x35	; 53
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	20 e1       	ldi	r18, 0x10	; 16
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
	//Enable PCIE
	GIMSK = 0x20;
 11c:	8b e5       	ldi	r24, 0x5B	; 91
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	20 e2       	ldi	r18, 0x20	; 32
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18

	/*Configure Timers*/
	//GTCCR |= 0b10000001;	// Halts the timer to configure. Reset Prescaler and stop Counter.

	TCCR0B = 1<<CS02 | 1<<CS00;
 126:	83 e5       	ldi	r24, 0x53	; 83
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	25 e0       	ldi	r18, 0x05	; 5
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
	TIFR = 1 <<TOV0;
 130:	88 e5       	ldi	r24, 0x58	; 88
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	22 e0       	ldi	r18, 0x02	; 2
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
	TIMSK = 1<<TOIE0;
 13a:	89 e5       	ldi	r24, 0x59	; 89
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	22 e0       	ldi	r18, 0x02	; 2
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
	// GTCCR
	//TCCR0A y TCCR0B
	// TCNT0
	// OCR0A y OCR0B y TIFR

	sei();
 144:	78 94       	sei
	// Insert nop for synchronization
	//_NOP();
	PORTB &= 0<<PB3;
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	80 81       	ld	r24, Z
 14e:	88 e3       	ldi	r24, 0x38	; 56
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	10 82       	st	Z, r1
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	a8 ec       	ldi	r26, 0xC8	; 200
 15c:	b2 e4       	ldi	r27, 0x42	; 66
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	9a 83       	std	Y+2, r25	; 0x02
 162:	ab 83       	std	Y+3, r26	; 0x03
 164:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	4a ef       	ldi	r20, 0xFA	; 250
 16c:	54 e4       	ldi	r21, 0x44	; 68
 16e:	69 81       	ldd	r22, Y+1	; 0x01
 170:	7a 81       	ldd	r23, Y+2	; 0x02
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	9c 81       	ldd	r25, Y+4	; 0x04
 176:	dd d0       	rcall	.+442    	; 0x332 <__mulsf3>
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
 17c:	8d 83       	std	Y+5, r24	; 0x05
 17e:	9e 83       	std	Y+6, r25	; 0x06
 180:	af 83       	std	Y+7, r26	; 0x07
 182:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e8       	ldi	r20, 0x80	; 128
 18a:	5f e3       	ldi	r21, 0x3F	; 63
 18c:	6d 81       	ldd	r22, Y+5	; 0x05
 18e:	7e 81       	ldd	r23, Y+6	; 0x06
 190:	8f 81       	ldd	r24, Y+7	; 0x07
 192:	98 85       	ldd	r25, Y+8	; 0x08
 194:	4d d0       	rcall	.+154    	; 0x230 <__cmpsf2>
 196:	88 23       	and	r24, r24
 198:	2c f4       	brge	.+10     	; 0x1a4 <__stack+0xc5>
		__ticks = 1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	9a 87       	std	Y+10, r25	; 0x0a
 1a0:	89 87       	std	Y+9, r24	; 0x09
 1a2:	3b c0       	rjmp	.+118    	; 0x21a <__stack+0x13b>
	else if (__tmp > 65535)
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	3f ef       	ldi	r19, 0xFF	; 255
 1a8:	4f e7       	ldi	r20, 0x7F	; 127
 1aa:	57 e4       	ldi	r21, 0x47	; 71
 1ac:	6d 81       	ldd	r22, Y+5	; 0x05
 1ae:	7e 81       	ldd	r23, Y+6	; 0x06
 1b0:	8f 81       	ldd	r24, Y+7	; 0x07
 1b2:	98 85       	ldd	r25, Y+8	; 0x08
 1b4:	ba d0       	rcall	.+372    	; 0x32a <__gesf2>
 1b6:	18 16       	cp	r1, r24
 1b8:	3c f5       	brge	.+78     	; 0x208 <__stack+0x129>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e2       	ldi	r20, 0x20	; 32
 1c0:	51 e4       	ldi	r21, 0x41	; 65
 1c2:	69 81       	ldd	r22, Y+1	; 0x01
 1c4:	7a 81       	ldd	r23, Y+2	; 0x02
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ca:	b3 d0       	rcall	.+358    	; 0x332 <__mulsf3>
 1cc:	dc 01       	movw	r26, r24
 1ce:	cb 01       	movw	r24, r22
 1d0:	bc 01       	movw	r22, r24
 1d2:	cd 01       	movw	r24, r26
 1d4:	31 d0       	rcall	.+98     	; 0x238 <__fixunssfsi>
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	9a 87       	std	Y+10, r25	; 0x0a
 1dc:	89 87       	std	Y+9, r24	; 0x09
 1de:	0f c0       	rjmp	.+30     	; 0x1fe <__stack+0x11f>
 1e0:	88 ec       	ldi	r24, 0xC8	; 200
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	9c 87       	std	Y+12, r25	; 0x0c
 1e6:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 1e8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ea:	9c 85       	ldd	r25, Y+12	; 0x0c
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <__stack+0x10d>
 1f0:	9c 87       	std	Y+12, r25	; 0x0c
 1f2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f4:	89 85       	ldd	r24, Y+9	; 0x09
 1f6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	9a 87       	std	Y+10, r25	; 0x0a
 1fc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	89 85       	ldd	r24, Y+9	; 0x09
 200:	9a 85       	ldd	r25, Y+10	; 0x0a
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	69 f7       	brne	.-38     	; 0x1e0 <__stack+0x101>
 206:	13 c0       	rjmp	.+38     	; 0x22e <__stack+0x14f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 208:	6d 81       	ldd	r22, Y+5	; 0x05
 20a:	7e 81       	ldd	r23, Y+6	; 0x06
 20c:	8f 81       	ldd	r24, Y+7	; 0x07
 20e:	98 85       	ldd	r25, Y+8	; 0x08
 210:	13 d0       	rcall	.+38     	; 0x238 <__fixunssfsi>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	9a 87       	std	Y+10, r25	; 0x0a
 218:	89 87       	std	Y+9, r24	; 0x09
 21a:	89 85       	ldd	r24, Y+9	; 0x09
 21c:	9a 85       	ldd	r25, Y+10	; 0x0a
 21e:	9e 87       	std	Y+14, r25	; 0x0e
 220:	8d 87       	std	Y+13, r24	; 0x0d
 222:	8d 85       	ldd	r24, Y+13	; 0x0d
 224:	9e 85       	ldd	r25, Y+14	; 0x0e
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <__stack+0x147>
 22a:	9e 87       	std	Y+14, r25	; 0x0e
 22c:	8d 87       	std	Y+13, r24	; 0x0d

	PORTB &= ~(0x08);
}


int main(void){
 22e:	93 cf       	rjmp	.-218    	; 0x156 <__stack+0x77>

00000230 <__cmpsf2>:
 230:	2f d0       	rcall	.+94     	; 0x290 <__fp_cmp>
 232:	08 f4       	brcc	.+2      	; 0x236 <__cmpsf2+0x6>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	08 95       	ret

00000238 <__fixunssfsi>:
 238:	57 d0       	rcall	.+174    	; 0x2e8 <__fp_splitA>
 23a:	88 f0       	brcs	.+34     	; 0x25e <__fixunssfsi+0x26>
 23c:	9f 57       	subi	r25, 0x7F	; 127
 23e:	90 f0       	brcs	.+36     	; 0x264 <__fixunssfsi+0x2c>
 240:	b9 2f       	mov	r27, r25
 242:	99 27       	eor	r25, r25
 244:	b7 51       	subi	r27, 0x17	; 23
 246:	a0 f0       	brcs	.+40     	; 0x270 <__fixunssfsi+0x38>
 248:	d1 f0       	breq	.+52     	; 0x27e <__fixunssfsi+0x46>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	88 1f       	adc	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	1a f0       	brmi	.+6      	; 0x25a <__fixunssfsi+0x22>
 254:	ba 95       	dec	r27
 256:	c9 f7       	brne	.-14     	; 0x24a <__fixunssfsi+0x12>
 258:	12 c0       	rjmp	.+36     	; 0x27e <__fixunssfsi+0x46>
 25a:	b1 30       	cpi	r27, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <__fixunssfsi+0x46>
 25e:	5e d0       	rcall	.+188    	; 0x31c <__fp_zero>
 260:	b1 e0       	ldi	r27, 0x01	; 1
 262:	08 95       	ret
 264:	5b c0       	rjmp	.+182    	; 0x31c <__fp_zero>
 266:	67 2f       	mov	r22, r23
 268:	78 2f       	mov	r23, r24
 26a:	88 27       	eor	r24, r24
 26c:	b8 5f       	subi	r27, 0xF8	; 248
 26e:	39 f0       	breq	.+14     	; 0x27e <__fixunssfsi+0x46>
 270:	b9 3f       	cpi	r27, 0xF9	; 249
 272:	cc f3       	brlt	.-14     	; 0x266 <__fixunssfsi+0x2e>
 274:	86 95       	lsr	r24
 276:	77 95       	ror	r23
 278:	67 95       	ror	r22
 27a:	b3 95       	inc	r27
 27c:	d9 f7       	brne	.-10     	; 0x274 <__fixunssfsi+0x3c>
 27e:	3e f4       	brtc	.+14     	; 0x28e <__fixunssfsi+0x56>
 280:	90 95       	com	r25
 282:	80 95       	com	r24
 284:	70 95       	com	r23
 286:	61 95       	neg	r22
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	8f 4f       	sbci	r24, 0xFF	; 255
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	08 95       	ret

00000290 <__fp_cmp>:
 290:	99 0f       	add	r25, r25
 292:	00 08       	sbc	r0, r0
 294:	55 0f       	add	r21, r21
 296:	aa 0b       	sbc	r26, r26
 298:	e0 e8       	ldi	r30, 0x80	; 128
 29a:	fe ef       	ldi	r31, 0xFE	; 254
 29c:	16 16       	cp	r1, r22
 29e:	17 06       	cpc	r1, r23
 2a0:	e8 07       	cpc	r30, r24
 2a2:	f9 07       	cpc	r31, r25
 2a4:	c0 f0       	brcs	.+48     	; 0x2d6 <__fp_cmp+0x46>
 2a6:	12 16       	cp	r1, r18
 2a8:	13 06       	cpc	r1, r19
 2aa:	e4 07       	cpc	r30, r20
 2ac:	f5 07       	cpc	r31, r21
 2ae:	98 f0       	brcs	.+38     	; 0x2d6 <__fp_cmp+0x46>
 2b0:	62 1b       	sub	r22, r18
 2b2:	73 0b       	sbc	r23, r19
 2b4:	84 0b       	sbc	r24, r20
 2b6:	95 0b       	sbc	r25, r21
 2b8:	39 f4       	brne	.+14     	; 0x2c8 <__fp_cmp+0x38>
 2ba:	0a 26       	eor	r0, r26
 2bc:	61 f0       	breq	.+24     	; 0x2d6 <__fp_cmp+0x46>
 2be:	23 2b       	or	r18, r19
 2c0:	24 2b       	or	r18, r20
 2c2:	25 2b       	or	r18, r21
 2c4:	21 f4       	brne	.+8      	; 0x2ce <__fp_cmp+0x3e>
 2c6:	08 95       	ret
 2c8:	0a 26       	eor	r0, r26
 2ca:	09 f4       	brne	.+2      	; 0x2ce <__fp_cmp+0x3e>
 2cc:	a1 40       	sbci	r26, 0x01	; 1
 2ce:	a6 95       	lsr	r26
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	81 1d       	adc	r24, r1
 2d4:	81 1d       	adc	r24, r1
 2d6:	08 95       	ret

000002d8 <__fp_split3>:
 2d8:	57 fd       	sbrc	r21, 7
 2da:	90 58       	subi	r25, 0x80	; 128
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	59 f0       	breq	.+22     	; 0x2f8 <__fp_splitA+0x10>
 2e2:	5f 3f       	cpi	r21, 0xFF	; 255
 2e4:	71 f0       	breq	.+28     	; 0x302 <__fp_splitA+0x1a>
 2e6:	47 95       	ror	r20

000002e8 <__fp_splitA>:
 2e8:	88 0f       	add	r24, r24
 2ea:	97 fb       	bst	r25, 7
 2ec:	99 1f       	adc	r25, r25
 2ee:	61 f0       	breq	.+24     	; 0x308 <__fp_splitA+0x20>
 2f0:	9f 3f       	cpi	r25, 0xFF	; 255
 2f2:	79 f0       	breq	.+30     	; 0x312 <__fp_splitA+0x2a>
 2f4:	87 95       	ror	r24
 2f6:	08 95       	ret
 2f8:	12 16       	cp	r1, r18
 2fa:	13 06       	cpc	r1, r19
 2fc:	14 06       	cpc	r1, r20
 2fe:	55 1f       	adc	r21, r21
 300:	f2 cf       	rjmp	.-28     	; 0x2e6 <__fp_split3+0xe>
 302:	46 95       	lsr	r20
 304:	f1 df       	rcall	.-30     	; 0x2e8 <__fp_splitA>
 306:	08 c0       	rjmp	.+16     	; 0x318 <__fp_splitA+0x30>
 308:	16 16       	cp	r1, r22
 30a:	17 06       	cpc	r1, r23
 30c:	18 06       	cpc	r1, r24
 30e:	99 1f       	adc	r25, r25
 310:	f1 cf       	rjmp	.-30     	; 0x2f4 <__fp_splitA+0xc>
 312:	86 95       	lsr	r24
 314:	71 05       	cpc	r23, r1
 316:	61 05       	cpc	r22, r1
 318:	08 94       	sec
 31a:	08 95       	ret

0000031c <__fp_zero>:
 31c:	e8 94       	clt

0000031e <__fp_szero>:
 31e:	bb 27       	eor	r27, r27
 320:	66 27       	eor	r22, r22
 322:	77 27       	eor	r23, r23
 324:	cb 01       	movw	r24, r22
 326:	97 f9       	bld	r25, 7
 328:	08 95       	ret

0000032a <__gesf2>:
 32a:	b2 df       	rcall	.-156    	; 0x290 <__fp_cmp>
 32c:	08 f4       	brcc	.+2      	; 0x330 <__gesf2+0x6>
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	08 95       	ret

00000332 <__mulsf3>:
 332:	0a d0       	rcall	.+20     	; 0x348 <__mulsf3x>
 334:	80 c0       	rjmp	.+256    	; 0x436 <__fp_round>
 336:	71 d0       	rcall	.+226    	; 0x41a <__fp_pscA>
 338:	28 f0       	brcs	.+10     	; 0x344 <__mulsf3+0x12>
 33a:	76 d0       	rcall	.+236    	; 0x428 <__fp_pscB>
 33c:	18 f0       	brcs	.+6      	; 0x344 <__mulsf3+0x12>
 33e:	95 23       	and	r25, r21
 340:	09 f0       	breq	.+2      	; 0x344 <__mulsf3+0x12>
 342:	62 c0       	rjmp	.+196    	; 0x408 <__fp_inf>
 344:	67 c0       	rjmp	.+206    	; 0x414 <__fp_nan>
 346:	eb cf       	rjmp	.-42     	; 0x31e <__fp_szero>

00000348 <__mulsf3x>:
 348:	c7 df       	rcall	.-114    	; 0x2d8 <__fp_split3>
 34a:	a8 f3       	brcs	.-22     	; 0x336 <__mulsf3+0x4>

0000034c <__mulsf3_pse>:
 34c:	99 23       	and	r25, r25
 34e:	d9 f3       	breq	.-10     	; 0x346 <__mulsf3+0x14>
 350:	55 23       	and	r21, r21
 352:	c9 f3       	breq	.-14     	; 0x346 <__mulsf3+0x14>
 354:	95 0f       	add	r25, r21
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	55 1f       	adc	r21, r21
 35a:	aa 27       	eor	r26, r26
 35c:	ee 27       	eor	r30, r30
 35e:	ff 27       	eor	r31, r31
 360:	bb 27       	eor	r27, r27
 362:	00 24       	eor	r0, r0
 364:	08 94       	sec
 366:	67 95       	ror	r22
 368:	20 f4       	brcc	.+8      	; 0x372 <__mulsf3_pse+0x26>
 36a:	e2 0f       	add	r30, r18
 36c:	f3 1f       	adc	r31, r19
 36e:	b4 1f       	adc	r27, r20
 370:	0a 1e       	adc	r0, r26
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	44 1f       	adc	r20, r20
 378:	aa 1f       	adc	r26, r26
 37a:	66 95       	lsr	r22
 37c:	a9 f7       	brne	.-22     	; 0x368 <__mulsf3_pse+0x1c>
 37e:	77 95       	ror	r23
 380:	30 f4       	brcc	.+12     	; 0x38e <__mulsf3_pse+0x42>
 382:	f3 0f       	add	r31, r19
 384:	b4 1f       	adc	r27, r20
 386:	0a 1e       	adc	r0, r26
 388:	12 1e       	adc	r1, r18
 38a:	08 f4       	brcc	.+2      	; 0x38e <__mulsf3_pse+0x42>
 38c:	63 95       	inc	r22
 38e:	33 0f       	add	r19, r19
 390:	44 1f       	adc	r20, r20
 392:	aa 1f       	adc	r26, r26
 394:	22 1f       	adc	r18, r18
 396:	76 95       	lsr	r23
 398:	99 f7       	brne	.-26     	; 0x380 <__mulsf3_pse+0x34>
 39a:	87 95       	ror	r24
 39c:	20 f4       	brcc	.+8      	; 0x3a6 <__mulsf3_pse+0x5a>
 39e:	b4 0f       	add	r27, r20
 3a0:	0a 1e       	adc	r0, r26
 3a2:	12 1e       	adc	r1, r18
 3a4:	63 1f       	adc	r22, r19
 3a6:	44 0f       	add	r20, r20
 3a8:	aa 1f       	adc	r26, r26
 3aa:	22 1f       	adc	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	86 95       	lsr	r24
 3b0:	a9 f7       	brne	.-22     	; 0x39c <__mulsf3_pse+0x50>
 3b2:	86 2f       	mov	r24, r22
 3b4:	71 2d       	mov	r23, r1
 3b6:	60 2d       	mov	r22, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	9f 57       	subi	r25, 0x7F	; 127
 3bc:	50 40       	sbci	r21, 0x00	; 0
 3be:	8a f0       	brmi	.+34     	; 0x3e2 <__mulsf3_pse+0x96>
 3c0:	e1 f0       	breq	.+56     	; 0x3fa <__mulsf3_pse+0xae>
 3c2:	88 23       	and	r24, r24
 3c4:	4a f0       	brmi	.+18     	; 0x3d8 <__mulsf3_pse+0x8c>
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	bb 1f       	adc	r27, r27
 3cc:	66 1f       	adc	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	91 50       	subi	r25, 0x01	; 1
 3d4:	50 40       	sbci	r21, 0x00	; 0
 3d6:	a9 f7       	brne	.-22     	; 0x3c2 <__mulsf3_pse+0x76>
 3d8:	9e 3f       	cpi	r25, 0xFE	; 254
 3da:	51 05       	cpc	r21, r1
 3dc:	70 f0       	brcs	.+28     	; 0x3fa <__mulsf3_pse+0xae>
 3de:	14 c0       	rjmp	.+40     	; 0x408 <__fp_inf>
 3e0:	9e cf       	rjmp	.-196    	; 0x31e <__fp_szero>
 3e2:	5f 3f       	cpi	r21, 0xFF	; 255
 3e4:	ec f3       	brlt	.-6      	; 0x3e0 <__mulsf3_pse+0x94>
 3e6:	98 3e       	cpi	r25, 0xE8	; 232
 3e8:	dc f3       	brlt	.-10     	; 0x3e0 <__mulsf3_pse+0x94>
 3ea:	86 95       	lsr	r24
 3ec:	77 95       	ror	r23
 3ee:	67 95       	ror	r22
 3f0:	b7 95       	ror	r27
 3f2:	f7 95       	ror	r31
 3f4:	e7 95       	ror	r30
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	c1 f7       	brne	.-16     	; 0x3ea <__mulsf3_pse+0x9e>
 3fa:	fe 2b       	or	r31, r30
 3fc:	88 0f       	add	r24, r24
 3fe:	91 1d       	adc	r25, r1
 400:	96 95       	lsr	r25
 402:	87 95       	ror	r24
 404:	97 f9       	bld	r25, 7
 406:	08 95       	ret

00000408 <__fp_inf>:
 408:	97 f9       	bld	r25, 7
 40a:	9f 67       	ori	r25, 0x7F	; 127
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	08 95       	ret

00000414 <__fp_nan>:
 414:	9f ef       	ldi	r25, 0xFF	; 255
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	08 95       	ret

0000041a <__fp_pscA>:
 41a:	00 24       	eor	r0, r0
 41c:	0a 94       	dec	r0
 41e:	16 16       	cp	r1, r22
 420:	17 06       	cpc	r1, r23
 422:	18 06       	cpc	r1, r24
 424:	09 06       	cpc	r0, r25
 426:	08 95       	ret

00000428 <__fp_pscB>:
 428:	00 24       	eor	r0, r0
 42a:	0a 94       	dec	r0
 42c:	12 16       	cp	r1, r18
 42e:	13 06       	cpc	r1, r19
 430:	14 06       	cpc	r1, r20
 432:	05 06       	cpc	r0, r21
 434:	08 95       	ret

00000436 <__fp_round>:
 436:	09 2e       	mov	r0, r25
 438:	03 94       	inc	r0
 43a:	00 0c       	add	r0, r0
 43c:	11 f4       	brne	.+4      	; 0x442 <__fp_round+0xc>
 43e:	88 23       	and	r24, r24
 440:	52 f0       	brmi	.+20     	; 0x456 <__fp_round+0x20>
 442:	bb 0f       	add	r27, r27
 444:	40 f4       	brcc	.+16     	; 0x456 <__fp_round+0x20>
 446:	bf 2b       	or	r27, r31
 448:	11 f4       	brne	.+4      	; 0x44e <__fp_round+0x18>
 44a:	60 ff       	sbrs	r22, 0
 44c:	04 c0       	rjmp	.+8      	; 0x456 <__fp_round+0x20>
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f 4f       	sbci	r24, 0xFF	; 255
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
