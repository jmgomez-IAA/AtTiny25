
AVR-INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000518  000005ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000005ac  2**0
                  ALLOC
  3 .stab         00001ea8  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000100e  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000020  00000000  00000000  00003462  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1b c0       	rjmp	.+54     	; 0x3c <__vector_2>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_clear_bss>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	01 c0       	rjmp	.+2      	; 0x30 <.do_clear_bss_start>

0000002e <.do_clear_bss_loop>:
  2e:	1d 92       	st	X+, r1

00000030 <.do_clear_bss_start>:
  30:	a1 36       	cpi	r26, 0x61	; 97
  32:	b1 07       	cpc	r27, r17
  34:	e1 f7       	brne	.-8      	; 0x2e <.do_clear_bss_loop>
  36:	33 d0       	rcall	.+102    	; 0x9e <main>
  38:	6d c2       	rjmp	.+1242   	; 0x514 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <__vector_2>:
 *  @brief Interrupt routine.
 *  There are 2 sources for external GPIO interrupt. INT0 and PCINT0[5..0].
 *  PCINT0[5..0] -> Pin change asynchronous interrupt, trigger when pin toggles. The PCMSK register control which pins INT is enabled.
 *  INT0, interrupt level, triggers when the pin is in a level.
 **/
ISR(PCINT0_vect){
  3c:	1f 92       	push	r1
  3e:	0f 92       	push	r0
  40:	00 90 5f 00 	lds	r0, 0x005F
  44:	0f 92       	push	r0
  46:	11 24       	eor	r1, r1
  48:	2f 93       	push	r18
  4a:	8f 93       	push	r24
  4c:	9f 93       	push	r25
  4e:	ef 93       	push	r30
  50:	ff 93       	push	r31
  52:	cf 93       	push	r28
  54:	df 93       	push	r29
  56:	cd b7       	in	r28, 0x3d	; 61
  58:	dd 27       	eor	r29, r29

	//Check whihc is interrupt source
	//if (GIFR & 0x10){
		if (PINB & 0x10){
  5a:	86 e3       	ldi	r24, 0x36	; 54
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	fc 01       	movw	r30, r24
  60:	80 81       	ld	r24, Z
  62:	88 2f       	mov	r24, r24
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	80 71       	andi	r24, 0x10	; 16
  68:	99 27       	eor	r25, r25
  6a:	21 e0       	ldi	r18, 0x01	; 1
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	09 f4       	brne	.+2      	; 0x72 <__SREG__+0x33>
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	22 23       	and	r18, r18
  74:	21 f0       	breq	.+8      	; 0x7e <__SREG__+0x3f>
		//Enable LED blink.
			buttomValue = 1;
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	80 93 60 00 	sts	0x0060, r24
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__SREG__+0x43>
		}
		else{
		//Disable LED blink.
			buttomValue = 0;
  7e:	10 92 60 00 	sts	0x0060, r1
		}
	//}

	return;
  82:	00 00       	nop
}
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	ff 91       	pop	r31
  8a:	ef 91       	pop	r30
  8c:	9f 91       	pop	r25
  8e:	8f 91       	pop	r24
  90:	2f 91       	pop	r18
  92:	0f 90       	pop	r0
  94:	00 92 5f 00 	sts	0x005F, r0
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <main>:


int main(void){
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	dd 27       	eor	r29, r29
  a6:	cc 51       	subi	r28, 0x1C	; 28
  a8:	cd bf       	out	0x3d, r28	; 61


	//En primer lugar, deshabilitamos las interrupciones globales.
	// Recuerda que para volver a activarlas se usa la función sei().
	cli();
  aa:	f8 94       	cli

	buttomValue = 0;
  ac:	10 92 60 00 	sts	0x0060, r1

	// If DDRxn is  0 (input), and PORTxn is 1 => pull-up enable. Verify Bit 6 – PUD: Pull-up Disable of MCUCR – MCU Control Register
	DDRB |=1<<PB3 | 0<<PB4;  //PB3 is output pin  & PB4 is input pin with pull-up.
  b0:	87 e3       	ldi	r24, 0x37	; 55
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	27 e3       	ldi	r18, 0x37	; 55
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	28 60       	ori	r18, 0x08	; 8
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	PORTB |= 1<<PB3 | 1<<PB4;	// Set output high.
  c2:	88 e3       	ldi	r24, 0x38	; 56
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	28 e3       	ldi	r18, 0x38	; 56
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	20 81       	ld	r18, Z
  ce:	28 61       	ori	r18, 0x18	; 24
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18

	//Enable Pin PB4 interrupt, mask the rest.
	PCMSK = 0x10;
  d4:	85 e3       	ldi	r24, 0x35	; 53
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	20 e1       	ldi	r18, 0x10	; 16
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
	//Enable PCIE
	GIMSK = 0x20;
  de:	8b e5       	ldi	r24, 0x5B	; 91
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	20 e2       	ldi	r18, 0x20	; 32
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18

	sei();
  e8:	78 94       	sei
	// Insert nop for synchronization
	//_NOP();
	PORTB &= 0<<PB3;
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	10 82       	st	Z, r1

	// Read port pins

	while(1){
		while(buttomValue != 0){
  fa:	ea c0       	rjmp	.+468    	; 0x2d0 <__stack+0x1f1>
			PORTB &= ~(1<<PB3);/* PB3 LOW */
  fc:	88 e3       	ldi	r24, 0x38	; 56
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	28 e3       	ldi	r18, 0x38	; 56
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	27 7f       	andi	r18, 0xF7	; 247
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	a8 ec       	ldi	r26, 0xC8	; 200
 114:	b2 e4       	ldi	r27, 0x42	; 66
 116:	89 83       	std	Y+1, r24	; 0x01
 118:	9a 83       	std	Y+2, r25	; 0x02
 11a:	ab 83       	std	Y+3, r26	; 0x03
 11c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	4a ef       	ldi	r20, 0xFA	; 250
 124:	54 e4       	ldi	r21, 0x44	; 68
 126:	69 81       	ldd	r22, Y+1	; 0x01
 128:	7a 81       	ldd	r23, Y+2	; 0x02
 12a:	8b 81       	ldd	r24, Y+3	; 0x03
 12c:	9c 81       	ldd	r25, Y+4	; 0x04
 12e:	5f d1       	rcall	.+702    	; 0x3ee <__mulsf3>
 130:	dc 01       	movw	r26, r24
 132:	cb 01       	movw	r24, r22
 134:	8d 83       	std	Y+5, r24	; 0x05
 136:	9e 83       	std	Y+6, r25	; 0x06
 138:	af 83       	std	Y+7, r26	; 0x07
 13a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 e8       	ldi	r20, 0x80	; 128
 142:	5f e3       	ldi	r21, 0x3F	; 63
 144:	6d 81       	ldd	r22, Y+5	; 0x05
 146:	7e 81       	ldd	r23, Y+6	; 0x06
 148:	8f 81       	ldd	r24, Y+7	; 0x07
 14a:	98 85       	ldd	r25, Y+8	; 0x08
 14c:	cf d0       	rcall	.+414    	; 0x2ec <__cmpsf2>
 14e:	88 23       	and	r24, r24
 150:	2c f4       	brge	.+10     	; 0x15c <__stack+0x7d>
		__ticks = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	9a 87       	std	Y+10, r25	; 0x0a
 158:	89 87       	std	Y+9, r24	; 0x09
 15a:	3b c0       	rjmp	.+118    	; 0x1d2 <__stack+0xf3>
	else if (__tmp > 65535)
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	3f ef       	ldi	r19, 0xFF	; 255
 160:	4f e7       	ldi	r20, 0x7F	; 127
 162:	57 e4       	ldi	r21, 0x47	; 71
 164:	6d 81       	ldd	r22, Y+5	; 0x05
 166:	7e 81       	ldd	r23, Y+6	; 0x06
 168:	8f 81       	ldd	r24, Y+7	; 0x07
 16a:	98 85       	ldd	r25, Y+8	; 0x08
 16c:	3c d1       	rcall	.+632    	; 0x3e6 <__gesf2>
 16e:	18 16       	cp	r1, r24
 170:	3c f5       	brge	.+78     	; 0x1c0 <__stack+0xe1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e2       	ldi	r20, 0x20	; 32
 178:	51 e4       	ldi	r21, 0x41	; 65
 17a:	69 81       	ldd	r22, Y+1	; 0x01
 17c:	7a 81       	ldd	r23, Y+2	; 0x02
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	35 d1       	rcall	.+618    	; 0x3ee <__mulsf3>
 184:	dc 01       	movw	r26, r24
 186:	cb 01       	movw	r24, r22
 188:	bc 01       	movw	r22, r24
 18a:	cd 01       	movw	r24, r26
 18c:	b3 d0       	rcall	.+358    	; 0x2f4 <__fixunssfsi>
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	9a 87       	std	Y+10, r25	; 0x0a
 194:	89 87       	std	Y+9, r24	; 0x09
 196:	0f c0       	rjmp	.+30     	; 0x1b6 <__stack+0xd7>
 198:	88 ec       	ldi	r24, 0xC8	; 200
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	9c 87       	std	Y+12, r25	; 0x0c
 19e:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 1a0:	8b 85       	ldd	r24, Y+11	; 0x0b
 1a2:	9c 85       	ldd	r25, Y+12	; 0x0c
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <__stack+0xc5>
 1a8:	9c 87       	std	Y+12, r25	; 0x0c
 1aa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ac:	89 85       	ldd	r24, Y+9	; 0x09
 1ae:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	9a 87       	std	Y+10, r25	; 0x0a
 1b4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b6:	89 85       	ldd	r24, Y+9	; 0x09
 1b8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	69 f7       	brne	.-38     	; 0x198 <__stack+0xb9>
 1be:	13 c0       	rjmp	.+38     	; 0x1e6 <__stack+0x107>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c0:	6d 81       	ldd	r22, Y+5	; 0x05
 1c2:	7e 81       	ldd	r23, Y+6	; 0x06
 1c4:	8f 81       	ldd	r24, Y+7	; 0x07
 1c6:	98 85       	ldd	r25, Y+8	; 0x08
 1c8:	95 d0       	rcall	.+298    	; 0x2f4 <__fixunssfsi>
 1ca:	dc 01       	movw	r26, r24
 1cc:	cb 01       	movw	r24, r22
 1ce:	9a 87       	std	Y+10, r25	; 0x0a
 1d0:	89 87       	std	Y+9, r24	; 0x09
 1d2:	89 85       	ldd	r24, Y+9	; 0x09
 1d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d6:	9e 87       	std	Y+14, r25	; 0x0e
 1d8:	8d 87       	std	Y+13, r24	; 0x0d
 1da:	8d 85       	ldd	r24, Y+13	; 0x0d
 1dc:	9e 85       	ldd	r25, Y+14	; 0x0e
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <__stack+0xff>
 1e2:	9e 87       	std	Y+14, r25	; 0x0e
 1e4:	8d 87       	std	Y+13, r24	; 0x0d
			_delay_ms(100);/* 100 ms delay */

			PORTB |=(1<<PB3); /* PB3 HIGH */
 1e6:	88 e3       	ldi	r24, 0x38	; 56
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	28 e3       	ldi	r18, 0x38	; 56
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	f9 01       	movw	r30, r18
 1f0:	20 81       	ld	r18, Z
 1f2:	28 60       	ori	r18, 0x08	; 8
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	a8 ec       	ldi	r26, 0xC8	; 200
 1fe:	b2 e4       	ldi	r27, 0x42	; 66
 200:	8f 87       	std	Y+15, r24	; 0x0f
 202:	98 8b       	std	Y+16, r25	; 0x10
 204:	a9 8b       	std	Y+17, r26	; 0x11
 206:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	4a ef       	ldi	r20, 0xFA	; 250
 20e:	54 e4       	ldi	r21, 0x44	; 68
 210:	6f 85       	ldd	r22, Y+15	; 0x0f
 212:	78 89       	ldd	r23, Y+16	; 0x10
 214:	89 89       	ldd	r24, Y+17	; 0x11
 216:	9a 89       	ldd	r25, Y+18	; 0x12
 218:	ea d0       	rcall	.+468    	; 0x3ee <__mulsf3>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	8b 8b       	std	Y+19, r24	; 0x13
 220:	9c 8b       	std	Y+20, r25	; 0x14
 222:	ad 8b       	std	Y+21, r26	; 0x15
 224:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 e8       	ldi	r20, 0x80	; 128
 22c:	5f e3       	ldi	r21, 0x3F	; 63
 22e:	6b 89       	ldd	r22, Y+19	; 0x13
 230:	7c 89       	ldd	r23, Y+20	; 0x14
 232:	8d 89       	ldd	r24, Y+21	; 0x15
 234:	9e 89       	ldd	r25, Y+22	; 0x16
 236:	5a d0       	rcall	.+180    	; 0x2ec <__cmpsf2>
 238:	88 23       	and	r24, r24
 23a:	2c f4       	brge	.+10     	; 0x246 <__stack+0x167>
		__ticks = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	98 8f       	std	Y+24, r25	; 0x18
 242:	8f 8b       	std	Y+23, r24	; 0x17
 244:	3b c0       	rjmp	.+118    	; 0x2bc <__stack+0x1dd>
	else if (__tmp > 65535)
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	3f ef       	ldi	r19, 0xFF	; 255
 24a:	4f e7       	ldi	r20, 0x7F	; 127
 24c:	57 e4       	ldi	r21, 0x47	; 71
 24e:	6b 89       	ldd	r22, Y+19	; 0x13
 250:	7c 89       	ldd	r23, Y+20	; 0x14
 252:	8d 89       	ldd	r24, Y+21	; 0x15
 254:	9e 89       	ldd	r25, Y+22	; 0x16
 256:	c7 d0       	rcall	.+398    	; 0x3e6 <__gesf2>
 258:	18 16       	cp	r1, r24
 25a:	3c f5       	brge	.+78     	; 0x2aa <__stack+0x1cb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	40 e2       	ldi	r20, 0x20	; 32
 262:	51 e4       	ldi	r21, 0x41	; 65
 264:	6f 85       	ldd	r22, Y+15	; 0x0f
 266:	78 89       	ldd	r23, Y+16	; 0x10
 268:	89 89       	ldd	r24, Y+17	; 0x11
 26a:	9a 89       	ldd	r25, Y+18	; 0x12
 26c:	c0 d0       	rcall	.+384    	; 0x3ee <__mulsf3>
 26e:	dc 01       	movw	r26, r24
 270:	cb 01       	movw	r24, r22
 272:	bc 01       	movw	r22, r24
 274:	cd 01       	movw	r24, r26
 276:	3e d0       	rcall	.+124    	; 0x2f4 <__fixunssfsi>
 278:	dc 01       	movw	r26, r24
 27a:	cb 01       	movw	r24, r22
 27c:	98 8f       	std	Y+24, r25	; 0x18
 27e:	8f 8b       	std	Y+23, r24	; 0x17
 280:	0f c0       	rjmp	.+30     	; 0x2a0 <__stack+0x1c1>
 282:	88 ec       	ldi	r24, 0xC8	; 200
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	9a 8f       	std	Y+26, r25	; 0x1a
 288:	89 8f       	std	Y+25, r24	; 0x19
 28a:	89 8d       	ldd	r24, Y+25	; 0x19
 28c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <__stack+0x1af>
 292:	9a 8f       	std	Y+26, r25	; 0x1a
 294:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 296:	8f 89       	ldd	r24, Y+23	; 0x17
 298:	98 8d       	ldd	r25, Y+24	; 0x18
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	98 8f       	std	Y+24, r25	; 0x18
 29e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a0:	8f 89       	ldd	r24, Y+23	; 0x17
 2a2:	98 8d       	ldd	r25, Y+24	; 0x18
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	69 f7       	brne	.-38     	; 0x282 <__stack+0x1a3>
 2a8:	13 c0       	rjmp	.+38     	; 0x2d0 <__stack+0x1f1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2aa:	6b 89       	ldd	r22, Y+19	; 0x13
 2ac:	7c 89       	ldd	r23, Y+20	; 0x14
 2ae:	8d 89       	ldd	r24, Y+21	; 0x15
 2b0:	9e 89       	ldd	r25, Y+22	; 0x16
 2b2:	20 d0       	rcall	.+64     	; 0x2f4 <__fixunssfsi>
 2b4:	dc 01       	movw	r26, r24
 2b6:	cb 01       	movw	r24, r22
 2b8:	98 8f       	std	Y+24, r25	; 0x18
 2ba:	8f 8b       	std	Y+23, r24	; 0x17
 2bc:	8f 89       	ldd	r24, Y+23	; 0x17
 2be:	98 8d       	ldd	r25, Y+24	; 0x18
 2c0:	9c 8f       	std	Y+28, r25	; 0x1c
 2c2:	8b 8f       	std	Y+27, r24	; 0x1b
 2c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <__stack+0x1e9>
 2cc:	9c 8f       	std	Y+28, r25	; 0x1c
 2ce:	8b 8f       	std	Y+27, r24	; 0x1b
	PORTB &= 0<<PB3;

	// Read port pins

	while(1){
		while(buttomValue != 0){
 2d0:	80 91 60 00 	lds	r24, 0x0060
 2d4:	88 23       	and	r24, r24
 2d6:	09 f0       	breq	.+2      	; 0x2da <__stack+0x1fb>
 2d8:	11 cf       	rjmp	.-478    	; 0xfc <__stack+0x1d>
			_delay_ms(100);/* 100 ms delay */

		}

		//Put Low the outputs
		PORTB &= 0<<PB3;
 2da:	88 e3       	ldi	r24, 0x38	; 56
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	88 e3       	ldi	r24, 0x38	; 56
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	10 82       	st	Z, r1

	return;
}


int main(void){
 2ea:	07 cf       	rjmp	.-498    	; 0xfa <__stack+0x1b>

000002ec <__cmpsf2>:
 2ec:	2f d0       	rcall	.+94     	; 0x34c <__fp_cmp>
 2ee:	08 f4       	brcc	.+2      	; 0x2f2 <__cmpsf2+0x6>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	08 95       	ret

000002f4 <__fixunssfsi>:
 2f4:	57 d0       	rcall	.+174    	; 0x3a4 <__fp_splitA>
 2f6:	88 f0       	brcs	.+34     	; 0x31a <__fixunssfsi+0x26>
 2f8:	9f 57       	subi	r25, 0x7F	; 127
 2fa:	90 f0       	brcs	.+36     	; 0x320 <__fixunssfsi+0x2c>
 2fc:	b9 2f       	mov	r27, r25
 2fe:	99 27       	eor	r25, r25
 300:	b7 51       	subi	r27, 0x17	; 23
 302:	a0 f0       	brcs	.+40     	; 0x32c <__fixunssfsi+0x38>
 304:	d1 f0       	breq	.+52     	; 0x33a <__fixunssfsi+0x46>
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	88 1f       	adc	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	1a f0       	brmi	.+6      	; 0x316 <__fixunssfsi+0x22>
 310:	ba 95       	dec	r27
 312:	c9 f7       	brne	.-14     	; 0x306 <__fixunssfsi+0x12>
 314:	12 c0       	rjmp	.+36     	; 0x33a <__fixunssfsi+0x46>
 316:	b1 30       	cpi	r27, 0x01	; 1
 318:	81 f0       	breq	.+32     	; 0x33a <__fixunssfsi+0x46>
 31a:	5e d0       	rcall	.+188    	; 0x3d8 <__fp_zero>
 31c:	b1 e0       	ldi	r27, 0x01	; 1
 31e:	08 95       	ret
 320:	5b c0       	rjmp	.+182    	; 0x3d8 <__fp_zero>
 322:	67 2f       	mov	r22, r23
 324:	78 2f       	mov	r23, r24
 326:	88 27       	eor	r24, r24
 328:	b8 5f       	subi	r27, 0xF8	; 248
 32a:	39 f0       	breq	.+14     	; 0x33a <__fixunssfsi+0x46>
 32c:	b9 3f       	cpi	r27, 0xF9	; 249
 32e:	cc f3       	brlt	.-14     	; 0x322 <__fixunssfsi+0x2e>
 330:	86 95       	lsr	r24
 332:	77 95       	ror	r23
 334:	67 95       	ror	r22
 336:	b3 95       	inc	r27
 338:	d9 f7       	brne	.-10     	; 0x330 <__fixunssfsi+0x3c>
 33a:	3e f4       	brtc	.+14     	; 0x34a <__fixunssfsi+0x56>
 33c:	90 95       	com	r25
 33e:	80 95       	com	r24
 340:	70 95       	com	r23
 342:	61 95       	neg	r22
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	8f 4f       	sbci	r24, 0xFF	; 255
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	08 95       	ret

0000034c <__fp_cmp>:
 34c:	99 0f       	add	r25, r25
 34e:	00 08       	sbc	r0, r0
 350:	55 0f       	add	r21, r21
 352:	aa 0b       	sbc	r26, r26
 354:	e0 e8       	ldi	r30, 0x80	; 128
 356:	fe ef       	ldi	r31, 0xFE	; 254
 358:	16 16       	cp	r1, r22
 35a:	17 06       	cpc	r1, r23
 35c:	e8 07       	cpc	r30, r24
 35e:	f9 07       	cpc	r31, r25
 360:	c0 f0       	brcs	.+48     	; 0x392 <__fp_cmp+0x46>
 362:	12 16       	cp	r1, r18
 364:	13 06       	cpc	r1, r19
 366:	e4 07       	cpc	r30, r20
 368:	f5 07       	cpc	r31, r21
 36a:	98 f0       	brcs	.+38     	; 0x392 <__fp_cmp+0x46>
 36c:	62 1b       	sub	r22, r18
 36e:	73 0b       	sbc	r23, r19
 370:	84 0b       	sbc	r24, r20
 372:	95 0b       	sbc	r25, r21
 374:	39 f4       	brne	.+14     	; 0x384 <__fp_cmp+0x38>
 376:	0a 26       	eor	r0, r26
 378:	61 f0       	breq	.+24     	; 0x392 <__fp_cmp+0x46>
 37a:	23 2b       	or	r18, r19
 37c:	24 2b       	or	r18, r20
 37e:	25 2b       	or	r18, r21
 380:	21 f4       	brne	.+8      	; 0x38a <__fp_cmp+0x3e>
 382:	08 95       	ret
 384:	0a 26       	eor	r0, r26
 386:	09 f4       	brne	.+2      	; 0x38a <__fp_cmp+0x3e>
 388:	a1 40       	sbci	r26, 0x01	; 1
 38a:	a6 95       	lsr	r26
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	81 1d       	adc	r24, r1
 390:	81 1d       	adc	r24, r1
 392:	08 95       	ret

00000394 <__fp_split3>:
 394:	57 fd       	sbrc	r21, 7
 396:	90 58       	subi	r25, 0x80	; 128
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	59 f0       	breq	.+22     	; 0x3b4 <__fp_splitA+0x10>
 39e:	5f 3f       	cpi	r21, 0xFF	; 255
 3a0:	71 f0       	breq	.+28     	; 0x3be <__fp_splitA+0x1a>
 3a2:	47 95       	ror	r20

000003a4 <__fp_splitA>:
 3a4:	88 0f       	add	r24, r24
 3a6:	97 fb       	bst	r25, 7
 3a8:	99 1f       	adc	r25, r25
 3aa:	61 f0       	breq	.+24     	; 0x3c4 <__fp_splitA+0x20>
 3ac:	9f 3f       	cpi	r25, 0xFF	; 255
 3ae:	79 f0       	breq	.+30     	; 0x3ce <__fp_splitA+0x2a>
 3b0:	87 95       	ror	r24
 3b2:	08 95       	ret
 3b4:	12 16       	cp	r1, r18
 3b6:	13 06       	cpc	r1, r19
 3b8:	14 06       	cpc	r1, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	f2 cf       	rjmp	.-28     	; 0x3a2 <__fp_split3+0xe>
 3be:	46 95       	lsr	r20
 3c0:	f1 df       	rcall	.-30     	; 0x3a4 <__fp_splitA>
 3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <__fp_splitA+0x30>
 3c4:	16 16       	cp	r1, r22
 3c6:	17 06       	cpc	r1, r23
 3c8:	18 06       	cpc	r1, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	f1 cf       	rjmp	.-30     	; 0x3b0 <__fp_splitA+0xc>
 3ce:	86 95       	lsr	r24
 3d0:	71 05       	cpc	r23, r1
 3d2:	61 05       	cpc	r22, r1
 3d4:	08 94       	sec
 3d6:	08 95       	ret

000003d8 <__fp_zero>:
 3d8:	e8 94       	clt

000003da <__fp_szero>:
 3da:	bb 27       	eor	r27, r27
 3dc:	66 27       	eor	r22, r22
 3de:	77 27       	eor	r23, r23
 3e0:	cb 01       	movw	r24, r22
 3e2:	97 f9       	bld	r25, 7
 3e4:	08 95       	ret

000003e6 <__gesf2>:
 3e6:	b2 df       	rcall	.-156    	; 0x34c <__fp_cmp>
 3e8:	08 f4       	brcc	.+2      	; 0x3ec <__gesf2+0x6>
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	08 95       	ret

000003ee <__mulsf3>:
 3ee:	0a d0       	rcall	.+20     	; 0x404 <__mulsf3x>
 3f0:	80 c0       	rjmp	.+256    	; 0x4f2 <__fp_round>
 3f2:	71 d0       	rcall	.+226    	; 0x4d6 <__fp_pscA>
 3f4:	28 f0       	brcs	.+10     	; 0x400 <__mulsf3+0x12>
 3f6:	76 d0       	rcall	.+236    	; 0x4e4 <__fp_pscB>
 3f8:	18 f0       	brcs	.+6      	; 0x400 <__mulsf3+0x12>
 3fa:	95 23       	and	r25, r21
 3fc:	09 f0       	breq	.+2      	; 0x400 <__mulsf3+0x12>
 3fe:	62 c0       	rjmp	.+196    	; 0x4c4 <__fp_inf>
 400:	67 c0       	rjmp	.+206    	; 0x4d0 <__fp_nan>
 402:	eb cf       	rjmp	.-42     	; 0x3da <__fp_szero>

00000404 <__mulsf3x>:
 404:	c7 df       	rcall	.-114    	; 0x394 <__fp_split3>
 406:	a8 f3       	brcs	.-22     	; 0x3f2 <__mulsf3+0x4>

00000408 <__mulsf3_pse>:
 408:	99 23       	and	r25, r25
 40a:	d9 f3       	breq	.-10     	; 0x402 <__mulsf3+0x14>
 40c:	55 23       	and	r21, r21
 40e:	c9 f3       	breq	.-14     	; 0x402 <__mulsf3+0x14>
 410:	95 0f       	add	r25, r21
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	55 1f       	adc	r21, r21
 416:	aa 27       	eor	r26, r26
 418:	ee 27       	eor	r30, r30
 41a:	ff 27       	eor	r31, r31
 41c:	bb 27       	eor	r27, r27
 41e:	00 24       	eor	r0, r0
 420:	08 94       	sec
 422:	67 95       	ror	r22
 424:	20 f4       	brcc	.+8      	; 0x42e <__mulsf3_pse+0x26>
 426:	e2 0f       	add	r30, r18
 428:	f3 1f       	adc	r31, r19
 42a:	b4 1f       	adc	r27, r20
 42c:	0a 1e       	adc	r0, r26
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	44 1f       	adc	r20, r20
 434:	aa 1f       	adc	r26, r26
 436:	66 95       	lsr	r22
 438:	a9 f7       	brne	.-22     	; 0x424 <__mulsf3_pse+0x1c>
 43a:	77 95       	ror	r23
 43c:	30 f4       	brcc	.+12     	; 0x44a <__mulsf3_pse+0x42>
 43e:	f3 0f       	add	r31, r19
 440:	b4 1f       	adc	r27, r20
 442:	0a 1e       	adc	r0, r26
 444:	12 1e       	adc	r1, r18
 446:	08 f4       	brcc	.+2      	; 0x44a <__mulsf3_pse+0x42>
 448:	63 95       	inc	r22
 44a:	33 0f       	add	r19, r19
 44c:	44 1f       	adc	r20, r20
 44e:	aa 1f       	adc	r26, r26
 450:	22 1f       	adc	r18, r18
 452:	76 95       	lsr	r23
 454:	99 f7       	brne	.-26     	; 0x43c <__mulsf3_pse+0x34>
 456:	87 95       	ror	r24
 458:	20 f4       	brcc	.+8      	; 0x462 <__mulsf3_pse+0x5a>
 45a:	b4 0f       	add	r27, r20
 45c:	0a 1e       	adc	r0, r26
 45e:	12 1e       	adc	r1, r18
 460:	63 1f       	adc	r22, r19
 462:	44 0f       	add	r20, r20
 464:	aa 1f       	adc	r26, r26
 466:	22 1f       	adc	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	86 95       	lsr	r24
 46c:	a9 f7       	brne	.-22     	; 0x458 <__mulsf3_pse+0x50>
 46e:	86 2f       	mov	r24, r22
 470:	71 2d       	mov	r23, r1
 472:	60 2d       	mov	r22, r0
 474:	11 24       	eor	r1, r1
 476:	9f 57       	subi	r25, 0x7F	; 127
 478:	50 40       	sbci	r21, 0x00	; 0
 47a:	8a f0       	brmi	.+34     	; 0x49e <__mulsf3_pse+0x96>
 47c:	e1 f0       	breq	.+56     	; 0x4b6 <__mulsf3_pse+0xae>
 47e:	88 23       	and	r24, r24
 480:	4a f0       	brmi	.+18     	; 0x494 <__mulsf3_pse+0x8c>
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	bb 1f       	adc	r27, r27
 488:	66 1f       	adc	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	91 50       	subi	r25, 0x01	; 1
 490:	50 40       	sbci	r21, 0x00	; 0
 492:	a9 f7       	brne	.-22     	; 0x47e <__mulsf3_pse+0x76>
 494:	9e 3f       	cpi	r25, 0xFE	; 254
 496:	51 05       	cpc	r21, r1
 498:	70 f0       	brcs	.+28     	; 0x4b6 <__mulsf3_pse+0xae>
 49a:	14 c0       	rjmp	.+40     	; 0x4c4 <__fp_inf>
 49c:	9e cf       	rjmp	.-196    	; 0x3da <__fp_szero>
 49e:	5f 3f       	cpi	r21, 0xFF	; 255
 4a0:	ec f3       	brlt	.-6      	; 0x49c <__mulsf3_pse+0x94>
 4a2:	98 3e       	cpi	r25, 0xE8	; 232
 4a4:	dc f3       	brlt	.-10     	; 0x49c <__mulsf3_pse+0x94>
 4a6:	86 95       	lsr	r24
 4a8:	77 95       	ror	r23
 4aa:	67 95       	ror	r22
 4ac:	b7 95       	ror	r27
 4ae:	f7 95       	ror	r31
 4b0:	e7 95       	ror	r30
 4b2:	9f 5f       	subi	r25, 0xFF	; 255
 4b4:	c1 f7       	brne	.-16     	; 0x4a6 <__mulsf3_pse+0x9e>
 4b6:	fe 2b       	or	r31, r30
 4b8:	88 0f       	add	r24, r24
 4ba:	91 1d       	adc	r25, r1
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	97 f9       	bld	r25, 7
 4c2:	08 95       	ret

000004c4 <__fp_inf>:
 4c4:	97 f9       	bld	r25, 7
 4c6:	9f 67       	ori	r25, 0x7F	; 127
 4c8:	80 e8       	ldi	r24, 0x80	; 128
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	08 95       	ret

000004d0 <__fp_nan>:
 4d0:	9f ef       	ldi	r25, 0xFF	; 255
 4d2:	80 ec       	ldi	r24, 0xC0	; 192
 4d4:	08 95       	ret

000004d6 <__fp_pscA>:
 4d6:	00 24       	eor	r0, r0
 4d8:	0a 94       	dec	r0
 4da:	16 16       	cp	r1, r22
 4dc:	17 06       	cpc	r1, r23
 4de:	18 06       	cpc	r1, r24
 4e0:	09 06       	cpc	r0, r25
 4e2:	08 95       	ret

000004e4 <__fp_pscB>:
 4e4:	00 24       	eor	r0, r0
 4e6:	0a 94       	dec	r0
 4e8:	12 16       	cp	r1, r18
 4ea:	13 06       	cpc	r1, r19
 4ec:	14 06       	cpc	r1, r20
 4ee:	05 06       	cpc	r0, r21
 4f0:	08 95       	ret

000004f2 <__fp_round>:
 4f2:	09 2e       	mov	r0, r25
 4f4:	03 94       	inc	r0
 4f6:	00 0c       	add	r0, r0
 4f8:	11 f4       	brne	.+4      	; 0x4fe <__fp_round+0xc>
 4fa:	88 23       	and	r24, r24
 4fc:	52 f0       	brmi	.+20     	; 0x512 <__fp_round+0x20>
 4fe:	bb 0f       	add	r27, r27
 500:	40 f4       	brcc	.+16     	; 0x512 <__fp_round+0x20>
 502:	bf 2b       	or	r27, r31
 504:	11 f4       	brne	.+4      	; 0x50a <__fp_round+0x18>
 506:	60 ff       	sbrs	r22, 0
 508:	04 c0       	rjmp	.+8      	; 0x512 <__fp_round+0x20>
 50a:	6f 5f       	subi	r22, 0xFF	; 255
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	8f 4f       	sbci	r24, 0xFF	; 255
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	08 95       	ret

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
