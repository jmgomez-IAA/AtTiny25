
at25_rfid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000386  2**0
                  ALLOC
  3 .stab         00001f74  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001713  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000020  00000000  00000000  00003a0f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__dtors_end>
   2:	27 c0       	rjmp	.+78     	; 0x52 <__bad_interrupt>
   4:	a3 c0       	rjmp	.+326    	; 0x14c <__vector_2>
   6:	25 c0       	rjmp	.+74     	; 0x52 <__bad_interrupt>
   8:	24 c0       	rjmp	.+72     	; 0x52 <__bad_interrupt>
   a:	23 c0       	rjmp	.+70     	; 0x52 <__bad_interrupt>
   c:	22 c0       	rjmp	.+68     	; 0x52 <__bad_interrupt>
   e:	21 c0       	rjmp	.+66     	; 0x52 <__bad_interrupt>
  10:	20 c0       	rjmp	.+64     	; 0x52 <__bad_interrupt>
  12:	1f c0       	rjmp	.+62     	; 0x52 <__bad_interrupt>
  14:	d2 c0       	rjmp	.+420    	; 0x1ba <__vector_10>
  16:	1d c0       	rjmp	.+58     	; 0x52 <__bad_interrupt>
  18:	1c c0       	rjmp	.+56     	; 0x52 <__bad_interrupt>
  1a:	1b c0       	rjmp	.+54     	; 0x52 <__bad_interrupt>
  1c:	a9 c0       	rjmp	.+338    	; 0x170 <__vector_14>

0000001e <__ctors_start>:
  1e:	61 01       	movw	r12, r2

00000020 <__ctors_end>:
  20:	64 01       	movw	r12, r8

00000022 <__dtors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	ab 36       	cpi	r26, 0x6B	; 107
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>

0000003a <__do_global_ctors>:
  3a:	10 e0       	ldi	r17, 0x00	; 0
  3c:	c0 e1       	ldi	r28, 0x10	; 16
  3e:	d0 e0       	ldi	r29, 0x00	; 0
  40:	03 c0       	rjmp	.+6      	; 0x48 <__SREG__+0x9>
  42:	21 97       	sbiw	r28, 0x01	; 1
  44:	fe 01       	movw	r30, r28
  46:	43 d1       	rcall	.+646    	; 0x2ce <__tablejump2__>
  48:	cf 30       	cpi	r28, 0x0F	; 15
  4a:	d1 07       	cpc	r29, r17
  4c:	d1 f7       	brne	.-12     	; 0x42 <__SREG__+0x3>
  4e:	da d0       	rcall	.+436    	; 0x204 <main>
  50:	44 c1       	rjmp	.+648    	; 0x2da <__do_global_dtors>

00000052 <__bad_interrupt>:
  52:	d6 cf       	rjmp	.-84     	; 0x0 <__vectors>

00000054 <_ZN8SPIClassC1Ev>:
*/


SPIClass::SPIClass() {
	// TODO Auto-generated constructor stub
	clkdiv = 10;
  54:	2a e0       	ldi	r18, 0x0A	; 10
  56:	fc 01       	movw	r30, r24
  58:	21 83       	std	Z+1, r18	; 0x01
  5a:	08 95       	ret

0000005c <_ZN8SPIClassD1Ev>:
	// TODO Auto-generated constructor stub
	clkdiv = 10;
}


SPIClass::~SPIClass() {
  5c:	08 95       	ret

0000005e <_ZN8SPIClass5beginEv>:
void SPIClass::setClockDivider(uint8_t div){clkdiv = div;};
void SPIClass::setBitOrder(uint8_t order){bitorder = order;};
*/

void SPIClass::begin(){
	spi_state = IDLE;
  5e:	fc 01       	movw	r30, r24
  60:	10 82       	st	Z, r1
  62:	08 95       	ret

00000064 <_ZN8SPIClass16beginTransactionE11SPISettings>:
void SPIClass::stop(){
	spi_state = STOP;

}

void SPIClass::beginTransaction(SPISettings settings){
  64:	fc 01       	movw	r30, r24

/**
 * @brief Kept the Counter in Reset State. It ensueres the counter is halted.
 **/
void SPIClass::stopTimer(){
	GTCCR |= _BV(TSM);
  66:	9c b5       	in	r25, 0x2c	; 44
  68:	90 68       	ori	r25, 0x80	; 128
  6a:	9c bd       	out	0x2c, r25	; 44
	GTCCR |= _BV(PSR0);
  6c:	9c b5       	in	r25, 0x2c	; 44
  6e:	91 60       	ori	r25, 0x01	; 1
  70:	9c bd       	out	0x2c, r25	; 44
/**
 * @brief Set counter mode, with Clear Timer on Compare Match mode.
 **/
void SPIClass::setCounterMode(){
	//Set CTC mode.
	TCCR0A |= _BV(WGM01);
  72:	9a b5       	in	r25, 0x2a	; 42
  74:	92 60       	ori	r25, 0x02	; 2
  76:	9a bd       	out	0x2a, r25	; 42

	//Clear and enable interrupts.
	TIFR |= _BV(OCF0A);              // Clear output compare interrupt flag
  78:	98 b7       	in	r25, 0x38	; 56
  7a:	90 61       	ori	r25, 0x10	; 16
  7c:	98 bf       	out	0x38, r25	; 56
	TIMSK |= _BV(OCIE0A);             // Enable output compare interrupt
  7e:	99 b7       	in	r25, 0x39	; 57
  80:	90 61       	ori	r25, 0x10	; 16
  82:	99 bf       	out	0x39, r25	; 57

/**
 * @brief Set Counter Time.
 **/
void SPIClass::setCounterTime(){
	TCCR0B |= _BV(CS01); //clkIO/8 preescaling.
  84:	93 b7       	in	r25, 0x33	; 51
  86:	92 60       	ori	r25, 0x02	; 2
  88:	93 bf       	out	0x33, r25	; 51
	OCR0A = 0x68;//CYCLES_PER_BIT;
  8a:	88 e6       	ldi	r24, 0x68	; 104
  8c:	89 bd       	out	0x29, r24	; 41
	TCNT0 = 0;                      // Count up from 0
  8e:	12 be       	out	0x32, r1	; 50
 * @pre The Counter should configured, but stopped PSR0=0.
 */
void SPIClass::configSPI(SPISettings settings){
	//USICR |=  _BV(USIOIE) | _BV(USIWM0) | _BV(USICS0);	// No funciona, Reloj mitad de periodo que la salida.

	USICR |=  _BV(USIOIE) | _BV(USIWM0) | _BV(USICS1) | _BV(USICLK); // Software CLK. Positive Edge.
  90:	9d b1       	in	r25, 0x0d	; 13
  92:	9a 65       	ori	r25, 0x5A	; 90
  94:	9d b9       	out	0x0d, r25	; 13

	if (settings.spiMode == SPISettings::SPI_MODE0){
  96:	61 11       	cpse	r22, r1
  98:	06 c0       	rjmp	.+12     	; 0xa6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x42>
		USICR |=  _BV(USIOIE) | _BV(USIWM0) | _BV(USICS1) | _BV(USICLK); // Software CLK. Positive Edge.
  9a:	8d b1       	in	r24, 0x0d	; 13
  9c:	8a 65       	ori	r24, 0x5A	; 90
  9e:	8d b9       	out	0x0d, r24	; 13
	setCounterTime();

	//Configure USI module as SPI.
	configSPI(settings);

	spi_state = READY;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

	if (settings.spiMode == SPISettings::SPI_MODE0){
		USICR |=  _BV(USIOIE) | _BV(USIWM0) | _BV(USICS1) | _BV(USICLK); // Software CLK. Positive Edge.
	}

	if (settings.spiMode == SPISettings::SPI_MODE3){
  a6:	63 30       	cpi	r22, 0x03	; 3
  a8:	d9 f7       	brne	.-10     	; 0xa0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x3c>
		USICR |=  _BV(USIOIE) | _BV(USIWM0) | _BV(USICS1) | _BV(USICS0) | _BV(USICLK); // Software CLK. Negative Edge.
  aa:	8d b1       	in	r24, 0x0d	; 13
  ac:	8e 65       	ori	r24, 0x5E	; 94
  ae:	8d b9       	out	0x0d, r24	; 13
	setCounterTime();

	//Configure USI module as SPI.
	configSPI(settings);

	spi_state = READY;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <_ZN8SPIClass8transferEh>:

};

int SPIClass::transfer(uint8_t val){
  b6:	fc 01       	movw	r30, r24
	mode = 0;
  b8:	12 82       	std	Z+2, r1	; 0x02
	spi_state = TRANSMIT;
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24

	//Charges first value

	USIDR = val;
  be:	6f b9       	out	0x0f, r22	; 15
	USISR &= ~_BV(0x0F);	//Secounter to 0.
  c0:	8e b1       	in	r24, 0x0e	; 14
  c2:	8e b9       	out	0x0e, r24	; 14
	USISR |= _BV(0x07);	//Secounter to 0.
  c4:	77 9a       	sbi	0x0e, 7	; 14
	transmissionSize = 1;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 63 00 	sts	0x0063, r24
	spi_tx_count = 0;
  cc:	10 92 64 00 	sts	0x0064, r1

/**
 * @brief PSR0 will be cleared by Hardware and the counter will start counting.
 **/
void SPIClass::startTimer(){
	GTCCR |= _BV(PSR0);
  d0:	8c b5       	in	r24, 0x2c	; 44
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8c bd       	out	0x2c, r24	; 44
	GTCCR &= ~_BV(TSM);
  d6:	8c b5       	in	r24, 0x2c	; 44
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	8c bd       	out	0x2c, r24	; 44
	USISR |= _BV(0x07);	//Secounter to 0.
	transmissionSize = 1;
	spi_tx_count = 0;
	startTimer();

	while(spi_state == TRANSMIT){
  dc:	80 81       	ld	r24, Z
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	39 f4       	brne	.+14     	; 0xf0 <__stack+0x11>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <__stack+0x5>
  e8:	00 c0       	rjmp	.+0      	; 0xea <__stack+0xb>
  ea:	90 81       	ld	r25, Z
  ec:	92 30       	cpi	r25, 0x02	; 2
  ee:	c9 f3       	breq	.-14     	; 0xe2 <__stack+0x3>
			_delay_us(1);
	};
	return usi_byte_read;
  f0:	80 91 60 00 	lds	r24, 0x0060
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <_ZN8SPIClass14endTransactionEv>:

}


void SPIClass::endTransaction(){
	mode  =0;
  f8:	fc 01       	movw	r30, r24
  fa:	12 82       	std	Z+2, r1	; 0x02

/**
 * @brief Kept the Counter in Reset State. It ensueres the counter is halted.
 **/
void SPIClass::stopTimer(){
	GTCCR |= _BV(TSM);
  fc:	8c b5       	in	r24, 0x2c	; 44
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	8c bd       	out	0x2c, r24	; 44
	GTCCR |= _BV(PSR0);
 102:	8c b5       	in	r24, 0x2c	; 44
 104:	81 60       	ori	r24, 0x01	; 1
 106:	8c bd       	out	0x2c, r24	; 44
 108:	08 95       	ret

0000010a <_ZN8SPIClass18manage_USI_OVF_ISREv>:
void SPIClass::endTransaction(){
	mode  =0;
	stopTimer();
};

void SPIClass::manage_USI_OVF_ISR(){
 10a:	fc 01       	movw	r30, r24
	//void __attribute__((interrupt)) USI_OVF_vect(void){
		spi_tx_count++;
 10c:	90 91 64 00 	lds	r25, 0x0064
 110:	9f 5f       	subi	r25, 0xFF	; 255
 112:	90 93 64 00 	sts	0x0064, r25
		USISR = _BV(USIOIF);
 116:	90 e4       	ldi	r25, 0x40	; 64
 118:	9e b9       	out	0x0e, r25	; 14
		usi_byte_read = USIBR;
 11a:	90 b3       	in	r25, 0x10	; 16
 11c:	90 93 60 00 	sts	0x0060, r25

		if (spi_tx_count < transmissionSize){
 120:	90 91 64 00 	lds	r25, 0x0064
 124:	20 91 63 00 	lds	r18, 0x0063
 128:	92 17       	cp	r25, r18
 12a:	28 f0       	brcs	.+10     	; 0x136 <_ZN8SPIClass18manage_USI_OVF_ISREv+0x2c>
		}
		else{
			//GTCCR |= _BV(TSM) | _BV(PSR0);	//Stop clock generation.
			//TIMSK &= ~_BV(OCIE0A);	//Stop Timer Counter ISR. No CLK on USCk
			//USICR = 0;
			transmissionSize = 0;
 12c:	10 92 63 00 	sts	0x0063, r1
			spi_state = READY;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 83       	st	Z, r24
 134:	08 95       	ret
		usi_byte_read = USIBR;

		if (spi_tx_count < transmissionSize){
			//Parece que no es necesario volver a configurar.
			//USICR |=  _BV(USIOIE) | _BV(USIWM0) | _BV(USICS0);
			USIDR = spi_tx_buffer[spi_tx_count];
 136:	e0 91 61 00 	lds	r30, 0x0061
 13a:	f0 91 62 00 	lds	r31, 0x0062
 13e:	e9 0f       	add	r30, r25
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	8f b9       	out	0x0f, r24	; 15
 146:	08 95       	ret

00000148 <_ZN8SPIClass23manage_TIMER0_COMPA_ISREv>:
		}
};

void SPIClass::manage_TIMER0_COMPA_ISR(){
	//ISR(TIMER0_COMPA_vect){
		USICR |= _BV(USITC);
 148:	68 9a       	sbi	0x0d, 0	; 13
 14a:	08 95       	ret

0000014c <__vector_2>:


/** @brief Interrupt vector for pin change on PB0
 *	Solo se acepta una pulsacion, despues deshabilitamos.
 */
ISR (PCINT0_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
	uint8_t pinbVal = PINB;
	if (!(pinbVal & 1<<PINB4))   // Trigger if DI is Low
 158:	b4 99       	sbic	0x16, 4	; 22
 15a:	04 c0       	rjmp	.+8      	; 0x164 <__vector_2+0x18>
	{
		//GIMSK &= ~_BV(PCIE);
		PINB |= _BV(PINB3);
 15c:	b3 9a       	sbi	0x16, 3	; 22
		spiOn = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 65 00 	sts	0x0065, r24
	}
}
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_14>:

extern "C" void USI_OVF_vect (void)  __attribute__ ((signal));
void USI_OVF_vect (void){
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	SPI.manage_USI_OVF_ISR();
 192:	86 e6       	ldi	r24, 0x66	; 102
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	b9 df       	rcall	.-142    	; 0x10a <_ZN8SPIClass18manage_USI_OVF_ISREv>
}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	bf 91       	pop	r27
 19e:	af 91       	pop	r26
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	7f 91       	pop	r23
 1a6:	6f 91       	pop	r22
 1a8:	5f 91       	pop	r21
 1aa:	4f 91       	pop	r20
 1ac:	3f 91       	pop	r19
 1ae:	2f 91       	pop	r18
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <__vector_10>:



extern "C" void TIMER0_COMPA_vect (void)  __attribute__ ((signal));
void TIMER0_COMPA_vect (void){
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
	SPI.manage_TIMER0_COMPA_ISR();
 1dc:	86 e6       	ldi	r24, 0x66	; 102
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	b3 df       	rcall	.-154    	; 0x148 <_ZN8SPIClass23manage_TIMER0_COMPA_ISREv>
};
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <main>:


int main(){

	//Prepare and configure interrupts and outputs.
	cli();
 204:	f8 94       	cli

	DDRB |= _BV(DDB4) | _BV(DDB3) | _BV(DDB2) | _BV(DDB1);
 206:	87 b3       	in	r24, 0x17	; 23
 208:	8e 61       	ori	r24, 0x1E	; 30
 20a:	87 bb       	out	0x17, r24	; 23
	//DDRB &=  ~_BV(DDB5) & ~_BV(DDB4) & ~_BV(DDB0);	// Default is 0.
	PORTB |= _BV(PORTB0);  //Pull-ups on PB0.
 20c:	c0 9a       	sbi	0x18, 0	; 24

	// Configure Interrupts to detect pin-change on PB0.
	GIMSK |= _BV(PCIE);               // Enable pin change interrupts
 20e:	8b b7       	in	r24, 0x3b	; 59
 210:	80 62       	ori	r24, 0x20	; 32
 212:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= _BV(PCINT4);             // Enable pin change on pin PB4
 214:	ac 9a       	sbi	0x15, 4	; 21


	SPI.begin();
 216:	86 e6       	ldi	r24, 0x66	; 102
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	21 df       	rcall	.-446    	; 0x5e <_ZN8SPIClass5beginEv>
	spiOn = 0;
 21c:	10 92 65 00 	sts	0x0065, r1

	sei();
 220:	78 94       	sei
public:
	enum IF_STATUS {IDLE, READY, TRANSMIT, RECEIVE, STOP};

	SPIClass();
	SPIClass(SPISettings &spiConfig);
	void setDataMode(SPISettings::SPI_MODE spimode){mode = spimode;};
 222:	10 92 68 00 	sts	0x0068, r1


	//void setSPIConfig();
	SPI.setDataMode(SPISettings::SPI_MODE0);

	PORTB |= _BV(PINB4);	//Take out from sleep mode.
 226:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	2f e7       	ldi	r18, 0x7F	; 127
 22a:	88 e3       	ldi	r24, 0x38	; 56
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x2a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x34>
 238:	00 00       	nop
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	80 e7       	ldi	r24, 0x70	; 112
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x3c>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x46>
 24a:	00 00       	nop
	uint8_t  reg_index = 0, base_addr =  0x80;

	while(1){
		//if (spiOn == 1){
		_delay_ms(100);
			SPI.beginTransaction(SPISettings(8, SPISettings::MSBFIRST, SPISettings::SPI_MODE0));
 24c:	48 e0       	ldi	r20, 0x08	; 8
 24e:	51 e0       	ldi	r21, 0x01	; 1
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	86 e6       	ldi	r24, 0x66	; 102
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	06 df       	rcall	.-500    	; 0x64 <_ZN8SPIClass16beginTransactionE11SPISettings>
			PORTB &= ~_BV(PINB3);	//SS, slave select 0.
 258:	c3 98       	cbi	0x18, 3	; 24
			SPI.transfer(0x02);
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	86 e6       	ldi	r24, 0x66	; 102
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2a df       	rcall	.-428    	; 0xb6 <_ZN8SPIClass8transferEh>
			//_delay_ms(2);
			SPI.transfer(0x0F);
 262:	6f e0       	ldi	r22, 0x0F	; 15
 264:	86 e6       	ldi	r24, 0x66	; 102
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	26 df       	rcall	.-436    	; 0xb6 <_ZN8SPIClass8transferEh>
			//_delay_ms(20);
			PORTB |= _BV(PINB3);
 26a:	c3 9a       	sbi	0x18, 3	; 24
			spiOn = 0;
 26c:	10 92 65 00 	sts	0x0065, r1
		//}
		//_delay_ms(20);
		SPI.endTransaction();
 270:	86 e6       	ldi	r24, 0x66	; 102
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	41 df       	rcall	.-382    	; 0xf8 <_ZN8SPIClass14endTransactionEv>
 276:	2f e7       	ldi	r18, 0x7F	; 127
 278:	88 e3       	ldi	r24, 0x38	; 56
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x78>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x82>
 286:	00 00       	nop
		_delay_ms(50);

		uint8_t readVal = 0xFF;
		do{
			SPI.beginTransaction(SPISettings(8, SPISettings::MSBFIRST, SPISettings::SPI_MODE0));
 288:	48 e0       	ldi	r20, 0x08	; 8
 28a:	51 e0       	ldi	r21, 0x01	; 1
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	86 e6       	ldi	r24, 0x66	; 102
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	e8 de       	rcall	.-560    	; 0x64 <_ZN8SPIClass16beginTransactionE11SPISettings>
			PORTB &= ~_BV(PINB3);	//SS, slave select 0.
 294:	c3 98       	cbi	0x18, 3	; 24
			SPI.transfer(0x82);
 296:	62 e8       	ldi	r22, 0x82	; 130
 298:	86 e6       	ldi	r24, 0x66	; 102
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0c df       	rcall	.-488    	; 0xb6 <_ZN8SPIClass8transferEh>
			readVal = SPI.transfer(0x00);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	86 e6       	ldi	r24, 0x66	; 102
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	08 df       	rcall	.-496    	; 0xb6 <_ZN8SPIClass8transferEh>
 2a6:	c8 2f       	mov	r28, r24
			PORTB |= _BV(PINB3);
 2a8:	c3 9a       	sbi	0x18, 3	; 24
			SPI.endTransaction();
 2aa:	86 e6       	ldi	r24, 0x66	; 102
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	24 df       	rcall	.-440    	; 0xf8 <_ZN8SPIClass14endTransactionEv>
 2b0:	8f e1       	ldi	r24, 0x1F	; 31
 2b2:	9e e4       	ldi	r25, 0x4E	; 78
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0xb0>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0xb6>
 2ba:	00 00       	nop
		//_delay_ms(20);
		SPI.endTransaction();
		_delay_ms(50);

		uint8_t readVal = 0xFF;
		do{
 2bc:	c4 fd       	sbrc	r28, 4
 2be:	e4 cf       	rjmp	.-56     	; 0x288 <main+0x84>
 2c0:	bc cf       	rjmp	.-136    	; 0x23a <main+0x36>

000002c2 <_GLOBAL__sub_I_SPI>:

constexpr uint8_t RST_PIN = 9;     // Configurable, see typical pin layout above
constexpr uint8_t SS_PIN = 10;     // Configurable, see typical pin layout above


SPIClass SPI;
 2c2:	86 e6       	ldi	r24, 0x66	; 102
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	c6 ce       	rjmp	.-628    	; 0x54 <_ZN8SPIClassC1Ev>

000002c8 <_GLOBAL__sub_D_SPI>:
 2c8:	86 e6       	ldi	r24, 0x66	; 102
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	c7 ce       	rjmp	.-626    	; 0x5c <_ZN8SPIClassD1Ev>

000002ce <__tablejump2__>:
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	05 90       	lpm	r0, Z+
 2d4:	f4 91       	lpm	r31, Z
 2d6:	e0 2d       	mov	r30, r0
 2d8:	09 94       	ijmp

000002da <__do_global_dtors>:
 2da:	10 e0       	ldi	r17, 0x00	; 0
 2dc:	c0 e1       	ldi	r28, 0x10	; 16
 2de:	d0 e0       	ldi	r29, 0x00	; 0
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <__do_global_dtors+0xe>
 2e2:	fe 01       	movw	r30, r28
 2e4:	f4 df       	rcall	.-24     	; 0x2ce <__tablejump2__>
 2e6:	21 96       	adiw	r28, 0x01	; 1
 2e8:	c1 31       	cpi	r28, 0x11	; 17
 2ea:	d1 07       	cpc	r29, r17
 2ec:	d1 f7       	brne	.-12     	; 0x2e2 <__do_global_dtors+0x8>
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
