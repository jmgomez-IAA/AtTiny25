
at25_rfid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001056  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001056  000010ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080006a  0080006a  000010f4  2**0
                  ALLOC
  3 .stab         00004ba8  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000030fc  00000000  00000000  00005c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000020  00000000  00000000  00008d98  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__dtors_end>
       2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
       4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
       6:	30 c0       	rjmp	.+96     	; 0x68 <__bad_interrupt>
       8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
       a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
       c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
       e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
      10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
      12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
      14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
      16:	28 c0       	rjmp	.+80     	; 0x68 <__bad_interrupt>
      18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
      1a:	26 c0       	rjmp	.+76     	; 0x68 <__bad_interrupt>
      1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>

0000001e <__ctors_start>:
      1e:	c6 07       	cpc	r28, r22

00000020 <__ctors_end>:
      20:	d2 07       	cpc	r29, r18

00000022 <__dtors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf ed       	ldi	r28, 0xDF	; 223
      28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
      2a:	10 e0       	ldi	r17, 0x00	; 0
      2c:	a0 e6       	ldi	r26, 0x60	; 96
      2e:	b0 e0       	ldi	r27, 0x00	; 0
      30:	e6 e5       	ldi	r30, 0x56	; 86
      32:	f0 e1       	ldi	r31, 0x10	; 16
      34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
      36:	05 90       	lpm	r0, Z+
      38:	0d 92       	st	X+, r0
      3a:	aa 36       	cpi	r26, 0x6A	; 106
      3c:	b1 07       	cpc	r27, r17
      3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
      40:	10 e0       	ldi	r17, 0x00	; 0
      42:	aa e6       	ldi	r26, 0x6A	; 106
      44:	b0 e0       	ldi	r27, 0x00	; 0
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	a1 38       	cpi	r26, 0x81	; 129
      4c:	b1 07       	cpc	r27, r17
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>

00000050 <__do_global_ctors>:
      50:	10 e0       	ldi	r17, 0x00	; 0
      52:	c0 e1       	ldi	r28, 0x10	; 16
      54:	d0 e0       	ldi	r29, 0x00	; 0
      56:	03 c0       	rjmp	.+6      	; 0x5e <__do_global_ctors+0xe>
      58:	21 97       	sbiw	r28, 0x01	; 1
      5a:	fe 01       	movw	r30, r28
      5c:	ea d7       	rcall	.+4052   	; 0x1032 <__tablejump2__>
      5e:	cf 30       	cpi	r28, 0x0F	; 15
      60:	d1 07       	cpc	r29, r17
      62:	d1 f7       	brne	.-12     	; 0x58 <__do_global_ctors+0x8>
      64:	4c d7       	rcall	.+3736   	; 0xefe <main>
      66:	eb c7       	rjmp	.+4054   	; 0x103e <__do_global_dtors>

00000068 <__bad_interrupt>:
      68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									byte value			///< The value to write.
								) {
      6a:	cf 93       	push	r28
      6c:	df 93       	push	r29
      6e:	cd b7       	in	r28, 0x3d	; 61
      70:	dd 27       	eor	r29, r29
      72:	c4 50       	subi	r28, 0x04	; 4
      74:	cd bf       	out	0x3d, r28	; 61
      76:	9a 83       	std	Y+2, r25	; 0x02
      78:	89 83       	std	Y+1, r24	; 0x01
      7a:	6b 83       	std	Y+3, r22	; 0x03
      7c:	4c 83       	std	Y+4, r20	; 0x04
	_spiClass->beginTransaction(_spiSettings);	// Set the settings to work with SPI bus
      7e:	89 81       	ldd	r24, Y+1	; 0x01
      80:	9a 81       	ldd	r25, Y+2	; 0x02
      82:	fc 01       	movw	r30, r24
      84:	20 89       	ldd	r18, Z+16	; 0x10
      86:	31 89       	ldd	r19, Z+17	; 0x11
      88:	89 81       	ldd	r24, Y+1	; 0x01
      8a:	9a 81       	ldd	r25, Y+2	; 0x02
      8c:	fc 01       	movw	r30, r24
      8e:	62 89       	ldd	r22, Z+18	; 0x12
      90:	c9 01       	movw	r24, r18
      92:	99 d6       	rcall	.+3378   	; 0xdc6 <_ZN8SPIClass16beginTransactionE11SPISettings>
	digitalWrite(_chipSelectPin, LOW);		// Select slave
      94:	89 81       	ldd	r24, Y+1	; 0x01
      96:	9a 81       	ldd	r25, Y+2	; 0x02
      98:	fc 01       	movw	r30, r24
      9a:	86 85       	ldd	r24, Z+14	; 0x0e
      9c:	60 e0       	ldi	r22, 0x00	; 0
      9e:	8e d7       	rcall	.+3868   	; 0xfbc <_Z12digitalWritehh>
	_spiClass->transfer(reg);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
      a0:	89 81       	ldd	r24, Y+1	; 0x01
      a2:	9a 81       	ldd	r25, Y+2	; 0x02
      a4:	fc 01       	movw	r30, r24
      a6:	80 89       	ldd	r24, Z+16	; 0x10
      a8:	91 89       	ldd	r25, Z+17	; 0x11
      aa:	6b 81       	ldd	r22, Y+3	; 0x03
      ac:	a9 d6       	rcall	.+3410   	; 0xe00 <_ZN8SPIClass8transferEh>
	_spiClass->transfer(value);
      ae:	89 81       	ldd	r24, Y+1	; 0x01
      b0:	9a 81       	ldd	r25, Y+2	; 0x02
      b2:	fc 01       	movw	r30, r24
      b4:	80 89       	ldd	r24, Z+16	; 0x10
      b6:	91 89       	ldd	r25, Z+17	; 0x11
      b8:	6c 81       	ldd	r22, Y+4	; 0x04
      ba:	a2 d6       	rcall	.+3396   	; 0xe00 <_ZN8SPIClass8transferEh>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
      bc:	89 81       	ldd	r24, Y+1	; 0x01
      be:	9a 81       	ldd	r25, Y+2	; 0x02
      c0:	fc 01       	movw	r30, r24
      c2:	86 85       	ldd	r24, Z+14	; 0x0e
      c4:	61 e0       	ldi	r22, 0x01	; 1
      c6:	7a d7       	rcall	.+3828   	; 0xfbc <_Z12digitalWritehh>
	_spiClass->endTransaction(); // Stop using the SPI bus
      c8:	89 81       	ldd	r24, Y+1	; 0x01
      ca:	9a 81       	ldd	r25, Y+2	; 0x02
      cc:	fc 01       	movw	r30, r24
      ce:	80 89       	ldd	r24, Z+16	; 0x10
      d0:	91 89       	ldd	r25, Z+17	; 0x11
      d2:	ab d6       	rcall	.+3414   	; 0xe2a <_ZN8SPIClass14endTransactionEv>
} // End PCD_WriteRegister()
      d4:	cc 5f       	subi	r28, 0xFC	; 252
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	df 91       	pop	r29
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									byte count,			///< The number of bytes to write to the register
									byte *values		///< The values to write. Byte array.
								) {
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	dd 27       	eor	r29, r29
      e6:	c7 50       	subi	r28, 0x07	; 7
      e8:	cd bf       	out	0x3d, r28	; 61
      ea:	9b 83       	std	Y+3, r25	; 0x03
      ec:	8a 83       	std	Y+2, r24	; 0x02
      ee:	6c 83       	std	Y+4, r22	; 0x04
      f0:	4d 83       	std	Y+5, r20	; 0x05
      f2:	3f 83       	std	Y+7, r19	; 0x07
      f4:	2e 83       	std	Y+6, r18	; 0x06
	_spiClass->beginTransaction(_spiSettings);	// Set the settings to work with SPI bus
      f6:	8a 81       	ldd	r24, Y+2	; 0x02
      f8:	9b 81       	ldd	r25, Y+3	; 0x03
      fa:	fc 01       	movw	r30, r24
      fc:	20 89       	ldd	r18, Z+16	; 0x10
      fe:	31 89       	ldd	r19, Z+17	; 0x11
     100:	8a 81       	ldd	r24, Y+2	; 0x02
     102:	9b 81       	ldd	r25, Y+3	; 0x03
     104:	fc 01       	movw	r30, r24
     106:	62 89       	ldd	r22, Z+18	; 0x12
     108:	c9 01       	movw	r24, r18
     10a:	5d d6       	rcall	.+3258   	; 0xdc6 <_ZN8SPIClass16beginTransactionE11SPISettings>
	digitalWrite(_chipSelectPin, LOW);		// Select slave
     10c:	8a 81       	ldd	r24, Y+2	; 0x02
     10e:	9b 81       	ldd	r25, Y+3	; 0x03
     110:	fc 01       	movw	r30, r24
     112:	86 85       	ldd	r24, Z+14	; 0x0e
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	52 d7       	rcall	.+3748   	; 0xfbc <_Z12digitalWritehh>
	_spiClass->transfer(reg);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	9b 81       	ldd	r25, Y+3	; 0x03
     11c:	fc 01       	movw	r30, r24
     11e:	80 89       	ldd	r24, Z+16	; 0x10
     120:	91 89       	ldd	r25, Z+17	; 0x11
     122:	6c 81       	ldd	r22, Y+4	; 0x04
     124:	6d d6       	rcall	.+3290   	; 0xe00 <_ZN8SPIClass8transferEh>
	for (byte index = 0; index < count; index++) {
     126:	19 82       	std	Y+1, r1	; 0x01
     128:	13 c0       	rjmp	.+38     	; 0x150 <__stack+0x71>
		_spiClass->transfer(values[index]);
     12a:	89 81       	ldd	r24, Y+1	; 0x01
     12c:	88 2f       	mov	r24, r24
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	2e 81       	ldd	r18, Y+6	; 0x06
     132:	3f 81       	ldd	r19, Y+7	; 0x07
     134:	82 0f       	add	r24, r18
     136:	93 1f       	adc	r25, r19
     138:	fc 01       	movw	r30, r24
     13a:	20 81       	ld	r18, Z
     13c:	8a 81       	ldd	r24, Y+2	; 0x02
     13e:	9b 81       	ldd	r25, Y+3	; 0x03
     140:	fc 01       	movw	r30, r24
     142:	80 89       	ldd	r24, Z+16	; 0x10
     144:	91 89       	ldd	r25, Z+17	; 0x11
     146:	62 2f       	mov	r22, r18
     148:	5b d6       	rcall	.+3254   	; 0xe00 <_ZN8SPIClass8transferEh>
									byte *values		///< The values to write. Byte array.
								) {
	_spiClass->beginTransaction(_spiSettings);	// Set the settings to work with SPI bus
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	_spiClass->transfer(reg);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	8f 5f       	subi	r24, 0xFF	; 255
     14e:	89 83       	std	Y+1, r24	; 0x01
     150:	99 81       	ldd	r25, Y+1	; 0x01
     152:	8d 81       	ldd	r24, Y+5	; 0x05
     154:	98 17       	cp	r25, r24
     156:	48 f3       	brcs	.-46     	; 0x12a <__stack+0x4b>
		_spiClass->transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
     158:	8a 81       	ldd	r24, Y+2	; 0x02
     15a:	9b 81       	ldd	r25, Y+3	; 0x03
     15c:	fc 01       	movw	r30, r24
     15e:	86 85       	ldd	r24, Z+14	; 0x0e
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	2c d7       	rcall	.+3672   	; 0xfbc <_Z12digitalWritehh>
	_spiClass->endTransaction(); // Stop using the SPI bus
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	fc 01       	movw	r30, r24
     16a:	80 89       	ldd	r24, Z+16	; 0x10
     16c:	91 89       	ldd	r25, Z+17	; 0x11
     16e:	5d d6       	rcall	.+3258   	; 0xe2a <_ZN8SPIClass14endTransactionEv>
} // End PCD_WriteRegister()
     170:	c9 5f       	subi	r28, 0xF9	; 249
     172:	cd bf       	out	0x3d, r28	; 61
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	PCD_Register reg	///< The register to read from. One of the PCD_Register enums.
								) {
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	dd 27       	eor	r29, r29
     182:	c4 50       	subi	r28, 0x04	; 4
     184:	cd bf       	out	0x3d, r28	; 61
     186:	9b 83       	std	Y+3, r25	; 0x03
     188:	8a 83       	std	Y+2, r24	; 0x02
     18a:	6c 83       	std	Y+4, r22	; 0x04
	byte value;
	_spiClass->beginTransaction(_spiSettings);	// Set the settings to work with SPI bus
     18c:	8a 81       	ldd	r24, Y+2	; 0x02
     18e:	9b 81       	ldd	r25, Y+3	; 0x03
     190:	fc 01       	movw	r30, r24
     192:	20 89       	ldd	r18, Z+16	; 0x10
     194:	31 89       	ldd	r19, Z+17	; 0x11
     196:	8a 81       	ldd	r24, Y+2	; 0x02
     198:	9b 81       	ldd	r25, Y+3	; 0x03
     19a:	fc 01       	movw	r30, r24
     19c:	62 89       	ldd	r22, Z+18	; 0x12
     19e:	c9 01       	movw	r24, r18
     1a0:	12 d6       	rcall	.+3108   	; 0xdc6 <_ZN8SPIClass16beginTransactionE11SPISettings>
	digitalWrite(_chipSelectPin, LOW);			// Select slave
     1a2:	8a 81       	ldd	r24, Y+2	; 0x02
     1a4:	9b 81       	ldd	r25, Y+3	; 0x03
     1a6:	fc 01       	movw	r30, r24
     1a8:	86 85       	ldd	r24, Z+14	; 0x0e
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	07 d7       	rcall	.+3598   	; 0xfbc <_Z12digitalWritehh>
	_spiClass->transfer(0x80 | reg);					// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
     1ae:	8c 81       	ldd	r24, Y+4	; 0x04
     1b0:	28 2f       	mov	r18, r24
     1b2:	20 68       	ori	r18, 0x80	; 128
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	9b 81       	ldd	r25, Y+3	; 0x03
     1b8:	fc 01       	movw	r30, r24
     1ba:	80 89       	ldd	r24, Z+16	; 0x10
     1bc:	91 89       	ldd	r25, Z+17	; 0x11
     1be:	62 2f       	mov	r22, r18
     1c0:	1f d6       	rcall	.+3134   	; 0xe00 <_ZN8SPIClass8transferEh>
	value = _spiClass->transfer(0);					// Read the value back. Send 0 to stop reading.
     1c2:	8a 81       	ldd	r24, Y+2	; 0x02
     1c4:	9b 81       	ldd	r25, Y+3	; 0x03
     1c6:	fc 01       	movw	r30, r24
     1c8:	80 89       	ldd	r24, Z+16	; 0x10
     1ca:	91 89       	ldd	r25, Z+17	; 0x11
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	18 d6       	rcall	.+3120   	; 0xe00 <_ZN8SPIClass8transferEh>
     1d0:	89 83       	std	Y+1, r24	; 0x01
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	9b 81       	ldd	r25, Y+3	; 0x03
     1d6:	fc 01       	movw	r30, r24
     1d8:	86 85       	ldd	r24, Z+14	; 0x0e
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	ef d6       	rcall	.+3550   	; 0xfbc <_Z12digitalWritehh>
	_spiClass->endTransaction(); // Stop using the SPI bus
     1de:	8a 81       	ldd	r24, Y+2	; 0x02
     1e0:	9b 81       	ldd	r25, Y+3	; 0x03
     1e2:	fc 01       	movw	r30, r24
     1e4:	80 89       	ldd	r24, Z+16	; 0x10
     1e6:	91 89       	ldd	r25, Z+17	; 0x11
     1e8:	20 d6       	rcall	.+3136   	; 0xe2a <_ZN8SPIClass14endTransactionEv>
	return value;
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
} // End PCD_ReadRegister()
     1ec:	cc 5f       	subi	r28, 0xFC	; 252
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
 */
void MFRC522::PCD_ReadRegister(	PCD_Register reg,	///< The register to read from. One of the PCD_Register enums.
								byte count,			///< The number of bytes to read
								byte *values,		///< Byte array to store the values in.
								byte rxAlign		///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	dd 27       	eor	r29, r29
     202:	cb 50       	subi	r28, 0x0B	; 11
     204:	cd bf       	out	0x3d, r28	; 61
     206:	9e 83       	std	Y+6, r25	; 0x06
     208:	8d 83       	std	Y+5, r24	; 0x05
     20a:	6f 83       	std	Y+7, r22	; 0x07
     20c:	48 87       	std	Y+8, r20	; 0x08
     20e:	3a 87       	std	Y+10, r19	; 0x0a
     210:	29 87       	std	Y+9, r18	; 0x09
     212:	0b 87       	std	Y+11, r16	; 0x0b
	if (count == 0) {
     214:	88 85       	ldd	r24, Y+8	; 0x08
     216:	88 23       	and	r24, r24
     218:	09 f4       	brne	.+2      	; 0x21c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x26>
		return;
     21a:	7f c0       	rjmp	.+254    	; 0x31a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x124>
	}
	//Serial.print(F("Reading ")); 	Serial.print(count); Serial.println(F(" bytes from register."));
	byte address = 0x80 | reg;				// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
     21c:	8f 81       	ldd	r24, Y+7	; 0x07
     21e:	80 68       	ori	r24, 0x80	; 128
     220:	8a 83       	std	Y+2, r24	; 0x02
	byte index = 0;							// Index in values array.
     222:	19 82       	std	Y+1, r1	; 0x01
	_spiClass->beginTransaction(_spiSettings);	// Set the settings to work with SPI bus
     224:	8d 81       	ldd	r24, Y+5	; 0x05
     226:	9e 81       	ldd	r25, Y+6	; 0x06
     228:	fc 01       	movw	r30, r24
     22a:	20 89       	ldd	r18, Z+16	; 0x10
     22c:	31 89       	ldd	r19, Z+17	; 0x11
     22e:	8d 81       	ldd	r24, Y+5	; 0x05
     230:	9e 81       	ldd	r25, Y+6	; 0x06
     232:	fc 01       	movw	r30, r24
     234:	62 89       	ldd	r22, Z+18	; 0x12
     236:	c9 01       	movw	r24, r18
     238:	c6 d5       	rcall	.+2956   	; 0xdc6 <_ZN8SPIClass16beginTransactionE11SPISettings>
	digitalWrite(_chipSelectPin, LOW);		// Select slave
     23a:	8d 81       	ldd	r24, Y+5	; 0x05
     23c:	9e 81       	ldd	r25, Y+6	; 0x06
     23e:	fc 01       	movw	r30, r24
     240:	86 85       	ldd	r24, Z+14	; 0x0e
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	bb d6       	rcall	.+3446   	; 0xfbc <_Z12digitalWritehh>
	count--;								// One read is performed outside of the loop
     246:	88 85       	ldd	r24, Y+8	; 0x08
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	88 87       	std	Y+8, r24	; 0x08
	_spiClass->transfer(address);					// Tell MFRC522 which address we want to read
     24c:	8d 81       	ldd	r24, Y+5	; 0x05
     24e:	9e 81       	ldd	r25, Y+6	; 0x06
     250:	fc 01       	movw	r30, r24
     252:	80 89       	ldd	r24, Z+16	; 0x10
     254:	91 89       	ldd	r25, Z+17	; 0x11
     256:	6a 81       	ldd	r22, Y+2	; 0x02
     258:	d3 d5       	rcall	.+2982   	; 0xe00 <_ZN8SPIClass8transferEh>
	if (rxAlign) {		// Only update bit positions rxAlign..7 in values[0]
     25a:	8b 85       	ldd	r24, Y+11	; 0x0b
     25c:	88 23       	and	r24, r24
     25e:	39 f1       	breq	.+78     	; 0x2ae <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xb8>
		// Create bit mask for bit positions rxAlign..7
		byte mask = (0xFF << rxAlign) & 0xFF;
     260:	8b 85       	ldd	r24, Y+11	; 0x0b
     262:	28 2f       	mov	r18, r24
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x7a>
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	2a 95       	dec	r18
     272:	e2 f7       	brpl	.-8      	; 0x26c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x76>
     274:	8b 83       	std	Y+3, r24	; 0x03
		// Read value and tell that we want to read the same address again.
		byte value = _spiClass->transfer(address);
     276:	8d 81       	ldd	r24, Y+5	; 0x05
     278:	9e 81       	ldd	r25, Y+6	; 0x06
     27a:	fc 01       	movw	r30, r24
     27c:	80 89       	ldd	r24, Z+16	; 0x10
     27e:	91 89       	ldd	r25, Z+17	; 0x11
     280:	6a 81       	ldd	r22, Y+2	; 0x02
     282:	be d5       	rcall	.+2940   	; 0xe00 <_ZN8SPIClass8transferEh>
     284:	8c 83       	std	Y+4, r24	; 0x04
		// Apply mask to both current value of values[0] and the new data in value.
		values[0] = (values[0] & ~mask) | (value & mask);
     286:	89 85       	ldd	r24, Y+9	; 0x09
     288:	9a 85       	ldd	r25, Y+10	; 0x0a
     28a:	fc 01       	movw	r30, r24
     28c:	80 81       	ld	r24, Z
     28e:	98 2f       	mov	r25, r24
     290:	8b 81       	ldd	r24, Y+3	; 0x03
     292:	80 95       	com	r24
     294:	89 23       	and	r24, r25
     296:	2c 81       	ldd	r18, Y+4	; 0x04
     298:	9b 81       	ldd	r25, Y+3	; 0x03
     29a:	92 23       	and	r25, r18
     29c:	89 2b       	or	r24, r25
     29e:	28 2f       	mov	r18, r24
     2a0:	89 85       	ldd	r24, Y+9	; 0x09
     2a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
		index++;
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	8f 5f       	subi	r24, 0xFF	; 255
     2ac:	89 83       	std	Y+1, r24	; 0x01
	}
	while (index < count) {
     2ae:	14 c0       	rjmp	.+40     	; 0x2d8 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xe2>
		values[index] = _spiClass->transfer(address);	// Read value and tell that we want to read the same address again.
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	88 2f       	mov	r24, r24
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	29 85       	ldd	r18, Y+9	; 0x09
     2b8:	3a 85       	ldd	r19, Y+10	; 0x0a
     2ba:	89 01       	movw	r16, r18
     2bc:	08 0f       	add	r16, r24
     2be:	19 1f       	adc	r17, r25
     2c0:	8d 81       	ldd	r24, Y+5	; 0x05
     2c2:	9e 81       	ldd	r25, Y+6	; 0x06
     2c4:	fc 01       	movw	r30, r24
     2c6:	80 89       	ldd	r24, Z+16	; 0x10
     2c8:	91 89       	ldd	r25, Z+17	; 0x11
     2ca:	6a 81       	ldd	r22, Y+2	; 0x02
     2cc:	99 d5       	rcall	.+2866   	; 0xe00 <_ZN8SPIClass8transferEh>
     2ce:	f8 01       	movw	r30, r16
     2d0:	80 83       	st	Z, r24
		index++;
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	8f 5f       	subi	r24, 0xFF	; 255
     2d6:	89 83       	std	Y+1, r24	; 0x01
		byte value = _spiClass->transfer(address);
		// Apply mask to both current value of values[0] and the new data in value.
		values[0] = (values[0] & ~mask) | (value & mask);
		index++;
	}
	while (index < count) {
     2d8:	99 81       	ldd	r25, Y+1	; 0x01
     2da:	88 85       	ldd	r24, Y+8	; 0x08
     2dc:	98 17       	cp	r25, r24
     2de:	40 f3       	brcs	.-48     	; 0x2b0 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xba>
		values[index] = _spiClass->transfer(address);	// Read value and tell that we want to read the same address again.
		index++;
	}
	values[index] = _spiClass->transfer(0);			// Read the final byte. Send 0 to stop reading.
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	88 2f       	mov	r24, r24
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	29 85       	ldd	r18, Y+9	; 0x09
     2e8:	3a 85       	ldd	r19, Y+10	; 0x0a
     2ea:	89 01       	movw	r16, r18
     2ec:	08 0f       	add	r16, r24
     2ee:	19 1f       	adc	r17, r25
     2f0:	8d 81       	ldd	r24, Y+5	; 0x05
     2f2:	9e 81       	ldd	r25, Y+6	; 0x06
     2f4:	fc 01       	movw	r30, r24
     2f6:	80 89       	ldd	r24, Z+16	; 0x10
     2f8:	91 89       	ldd	r25, Z+17	; 0x11
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	81 d5       	rcall	.+2818   	; 0xe00 <_ZN8SPIClass8transferEh>
     2fe:	f8 01       	movw	r30, r16
     300:	80 83       	st	Z, r24
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
     302:	8d 81       	ldd	r24, Y+5	; 0x05
     304:	9e 81       	ldd	r25, Y+6	; 0x06
     306:	fc 01       	movw	r30, r24
     308:	86 85       	ldd	r24, Z+14	; 0x0e
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	57 d6       	rcall	.+3246   	; 0xfbc <_Z12digitalWritehh>
	_spiClass->endTransaction(); // Stop using the SPI bus
     30e:	8d 81       	ldd	r24, Y+5	; 0x05
     310:	9e 81       	ldd	r25, Y+6	; 0x06
     312:	fc 01       	movw	r30, r24
     314:	80 89       	ldd	r24, Z+16	; 0x10
     316:	91 89       	ldd	r25, Z+17	; 0x11
     318:	88 d5       	rcall	.+2832   	; 0xe2a <_ZN8SPIClass14endTransactionEv>
} // End PCD_ReadRegister()
     31a:	c5 5f       	subi	r28, 0xF5	; 245
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	08 95       	ret

00000328 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										byte mask			///< The bits to set.
									) { 
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	dd 27       	eor	r29, r29
     330:	c5 50       	subi	r28, 0x05	; 5
     332:	cd bf       	out	0x3d, r28	; 61
     334:	9b 83       	std	Y+3, r25	; 0x03
     336:	8a 83       	std	Y+2, r24	; 0x02
     338:	6c 83       	std	Y+4, r22	; 0x04
     33a:	4d 83       	std	Y+5, r20	; 0x05
	byte tmp;
	tmp = PCD_ReadRegister(reg);
     33c:	8a 81       	ldd	r24, Y+2	; 0x02
     33e:	9b 81       	ldd	r25, Y+3	; 0x03
     340:	6c 81       	ldd	r22, Y+4	; 0x04
     342:	1b df       	rcall	.-458    	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     344:	89 83       	std	Y+1, r24	; 0x01
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
     346:	99 81       	ldd	r25, Y+1	; 0x01
     348:	8d 81       	ldd	r24, Y+5	; 0x05
     34a:	29 2f       	mov	r18, r25
     34c:	28 2b       	or	r18, r24
     34e:	8a 81       	ldd	r24, Y+2	; 0x02
     350:	9b 81       	ldd	r25, Y+3	; 0x03
     352:	42 2f       	mov	r20, r18
     354:	6c 81       	ldd	r22, Y+4	; 0x04
     356:	89 de       	rcall	.-750    	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
} // End PCD_SetRegisterBitMask()
     358:	cb 5f       	subi	r28, 0xFB	; 251
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										byte mask			///< The bits to clear.
									  ) {
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	dd 27       	eor	r29, r29
     36a:	c5 50       	subi	r28, 0x05	; 5
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	9b 83       	std	Y+3, r25	; 0x03
     370:	8a 83       	std	Y+2, r24	; 0x02
     372:	6c 83       	std	Y+4, r22	; 0x04
     374:	4d 83       	std	Y+5, r20	; 0x05
	byte tmp;
	tmp = PCD_ReadRegister(reg);
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	9b 81       	ldd	r25, Y+3	; 0x03
     37a:	6c 81       	ldd	r22, Y+4	; 0x04
     37c:	fe de       	rcall	.-516    	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     37e:	89 83       	std	Y+1, r24	; 0x01
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
     380:	8d 81       	ldd	r24, Y+5	; 0x05
     382:	98 2f       	mov	r25, r24
     384:	90 95       	com	r25
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	89 23       	and	r24, r25
     38a:	28 2f       	mov	r18, r24
     38c:	8a 81       	ldd	r24, Y+2	; 0x02
     38e:	9b 81       	ldd	r25, Y+3	; 0x03
     390:	42 2f       	mov	r20, r18
     392:	6c 81       	ldd	r22, Y+4	; 0x04
     394:	6a de       	rcall	.-812    	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
} // End PCD_ClearRegisterBitMask()
     396:	cb 5f       	subi	r28, 0xFB	; 251
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
												byte length,	///< In: The number of bytes to transfer.
												byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	dd 27       	eor	r29, r29
     3ac:	ca 50       	subi	r28, 0x0A	; 10
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	9d 83       	std	Y+5, r25	; 0x05
     3b2:	8c 83       	std	Y+4, r24	; 0x04
     3b4:	7f 83       	std	Y+7, r23	; 0x07
     3b6:	6e 83       	std	Y+6, r22	; 0x06
     3b8:	48 87       	std	Y+8, r20	; 0x08
     3ba:	3a 87       	std	Y+10, r19	; 0x0a
     3bc:	29 87       	std	Y+9, r18	; 0x09
	PCD_WriteRegister(CommandReg, PCD_Idle);		// Stop any active command.
     3be:	8c 81       	ldd	r24, Y+4	; 0x04
     3c0:	9d 81       	ldd	r25, Y+5	; 0x05
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	62 e0       	ldi	r22, 0x02	; 2
     3c6:	51 de       	rcall	.-862    	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(DivIrqReg, 0x04);				// Clear the CRCIRq interrupt request bit
     3c8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ca:	9d 81       	ldd	r25, Y+5	; 0x05
     3cc:	44 e0       	ldi	r20, 0x04	; 4
     3ce:	6a e0       	ldi	r22, 0x0A	; 10
     3d0:	4c de       	rcall	.-872    	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFOLevelReg, 0x80);			// FlushBuffer = 1, FIFO initialization
     3d2:	8c 81       	ldd	r24, Y+4	; 0x04
     3d4:	9d 81       	ldd	r25, Y+5	; 0x05
     3d6:	40 e8       	ldi	r20, 0x80	; 128
     3d8:	64 e1       	ldi	r22, 0x14	; 20
     3da:	47 de       	rcall	.-882    	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFODataReg, length, data);	// Write data to the FIFO
     3dc:	2e 81       	ldd	r18, Y+6	; 0x06
     3de:	3f 81       	ldd	r19, Y+7	; 0x07
     3e0:	8c 81       	ldd	r24, Y+4	; 0x04
     3e2:	9d 81       	ldd	r25, Y+5	; 0x05
     3e4:	48 85       	ldd	r20, Y+8	; 0x08
     3e6:	62 e1       	ldi	r22, 0x12	; 18
     3e8:	7a de       	rcall	.-780    	; 0xde <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
     3ea:	8c 81       	ldd	r24, Y+4	; 0x04
     3ec:	9d 81       	ldd	r25, Y+5	; 0x05
     3ee:	43 e0       	ldi	r20, 0x03	; 3
     3f0:	62 e0       	ldi	r22, 0x02	; 2
     3f2:	3b de       	rcall	.-906    	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73μs.
	// TODO check/modify for other architectures than Arduino Uno 16bit

	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73us.
	for (uint16_t i = 5000; i > 0; i--) {
     3f4:	88 e8       	ldi	r24, 0x88	; 136
     3f6:	93 e1       	ldi	r25, 0x13	; 19
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	2c c0       	rjmp	.+88     	; 0x456 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xb6>
		// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq reserved CRCIRq reserved reserved
		byte n = PCD_ReadRegister(DivIrqReg);
     3fe:	8c 81       	ldd	r24, Y+4	; 0x04
     400:	9d 81       	ldd	r25, Y+5	; 0x05
     402:	6a e0       	ldi	r22, 0x0A	; 10
     404:	ba de       	rcall	.-652    	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     406:	8b 83       	std	Y+3, r24	; 0x03
		if (n & 0x04) {									// CRCIRq bit set - calculation done
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	88 2f       	mov	r24, r24
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	84 70       	andi	r24, 0x04	; 4
     410:	99 27       	eor	r25, r25
     412:	00 97       	sbiw	r24, 0x00	; 0
     414:	d9 f0       	breq	.+54     	; 0x44c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xac>
			PCD_WriteRegister(CommandReg, PCD_Idle);	// Stop calculating CRC for new content in the FIFO.
     416:	8c 81       	ldd	r24, Y+4	; 0x04
     418:	9d 81       	ldd	r25, Y+5	; 0x05
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	62 e0       	ldi	r22, 0x02	; 2
     41e:	25 de       	rcall	.-950    	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
			// Transfer the result from the registers to the result buffer
			result[0] = PCD_ReadRegister(CRCResultRegL);
     420:	8c 81       	ldd	r24, Y+4	; 0x04
     422:	9d 81       	ldd	r25, Y+5	; 0x05
     424:	64 e4       	ldi	r22, 0x44	; 68
     426:	a9 de       	rcall	.-686    	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     428:	28 2f       	mov	r18, r24
     42a:	89 85       	ldd	r24, Y+9	; 0x09
     42c:	9a 85       	ldd	r25, Y+10	; 0x0a
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
			result[1] = PCD_ReadRegister(CRCResultRegH);
     432:	89 85       	ldd	r24, Y+9	; 0x09
     434:	9a 85       	ldd	r25, Y+10	; 0x0a
     436:	8c 01       	movw	r16, r24
     438:	0f 5f       	subi	r16, 0xFF	; 255
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	9d 81       	ldd	r25, Y+5	; 0x05
     440:	62 e4       	ldi	r22, 0x42	; 66
     442:	9b de       	rcall	.-714    	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     444:	f8 01       	movw	r30, r16
     446:	80 83       	st	Z, r24
			return STATUS_OK;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0a c0       	rjmp	.+20     	; 0x460 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xc0>
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73μs.
	// TODO check/modify for other architectures than Arduino Uno 16bit

	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73us.
	for (uint16_t i = 5000; i > 0; i--) {
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	9a 81       	ldd	r25, Y+2	; 0x02
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	9a 83       	std	Y+2, r25	; 0x02
     454:	89 83       	std	Y+1, r24	; 0x01
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	9a 81       	ldd	r25, Y+2	; 0x02
     45a:	00 97       	sbiw	r24, 0x00	; 0
     45c:	81 f6       	brne	.-96     	; 0x3fe <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x5e>
			result[1] = PCD_ReadRegister(CRCResultRegH);
			return STATUS_OK;
		}
	}
	// 89ms passed and nothing happend. Communication with the MFRC522 might be down.
	return STATUS_TIMEOUT;
     45e:	83 e0       	ldi	r24, 0x03	; 3
} // End PCD_CalculateCRC()
     460:	c6 5f       	subi	r28, 0xF6	; 246
     462:	cd bf       	out	0x3d, r28	; 61
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	08 95       	ret

0000046e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
													byte *backData,		///< nullptr or pointer to buffer if data should be read back after executing the command.
													byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
													byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits. Default nullptr.
													byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
													bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
     46e:	8f 92       	push	r8
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	dd 27       	eor	r29, r29
     488:	ce 50       	subi	r28, 0x0E	; 14
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	9b 83       	std	Y+3, r25	; 0x03
     48e:	8a 83       	std	Y+2, r24	; 0x02
     490:	7d 83       	std	Y+5, r23	; 0x05
     492:	6c 83       	std	Y+4, r22	; 0x04
     494:	4e 83       	std	Y+6, r20	; 0x06
     496:	38 87       	std	Y+8, r19	; 0x08
     498:	2f 83       	std	Y+7, r18	; 0x07
     49a:	1a 87       	std	Y+10, r17	; 0x0a
     49c:	09 87       	std	Y+9, r16	; 0x09
     49e:	fc 86       	std	Y+12, r15	; 0x0c
     4a0:	eb 86       	std	Y+11, r14	; 0x0b
     4a2:	cd 86       	std	Y+13, r12	; 0x0d
     4a4:	ae 86       	std	Y+14, r10	; 0x0e
	byte waitIRq = 0x30;		// RxIRq and IdleIRq
     4a6:	80 e3       	ldi	r24, 0x30	; 48
     4a8:	89 83       	std	Y+1, r24	; 0x01
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
     4aa:	eb 85       	ldd	r30, Y+11	; 0x0b
     4ac:	fc 85       	ldd	r31, Y+12	; 0x0c
     4ae:	69 85       	ldd	r22, Y+9	; 0x09
     4b0:	7a 85       	ldd	r23, Y+10	; 0x0a
     4b2:	4f 81       	ldd	r20, Y+7	; 0x07
     4b4:	58 85       	ldd	r21, Y+8	; 0x08
     4b6:	2c 81       	ldd	r18, Y+4	; 0x04
     4b8:	3d 81       	ldd	r19, Y+5	; 0x05
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	9b 81       	ldd	r25, Y+3	; 0x03
     4be:	ae 85       	ldd	r26, Y+14	; 0x0e
     4c0:	af 93       	push	r26
     4c2:	8d 84       	ldd	r8, Y+13	; 0x0d
     4c4:	5f 01       	movw	r10, r30
     4c6:	6b 01       	movw	r12, r22
     4c8:	7a 01       	movw	r14, r20
     4ca:	0e 81       	ldd	r16, Y+6	; 0x06
     4cc:	49 81       	ldd	r20, Y+1	; 0x01
     4ce:	6c e0       	ldi	r22, 0x0C	; 12
     4d0:	0f d0       	rcall	.+30     	; 0x4f0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
     4d2:	0f 90       	pop	r0
} // End PCD_TransceiveData()
     4d4:	c2 5f       	subi	r28, 0xF2	; 242
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	df 90       	pop	r13
     4e6:	cf 90       	pop	r12
     4e8:	bf 90       	pop	r11
     4ea:	af 90       	pop	r10
     4ec:	8f 90       	pop	r8
     4ee:	08 95       	ret

000004f0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
														byte *backData,		///< nullptr or pointer to buffer if data should be read back after executing the command.
														byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
														byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
														byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
														bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
     4f0:	8f 92       	push	r8
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	dd 27       	eor	r29, r29
     508:	c9 51       	subi	r28, 0x19	; 25
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	9d 87       	std	Y+13, r25	; 0x0d
     50e:	8c 87       	std	Y+12, r24	; 0x0c
     510:	6e 87       	std	Y+14, r22	; 0x0e
     512:	4f 87       	std	Y+15, r20	; 0x0f
     514:	39 8b       	std	Y+17, r19	; 0x11
     516:	28 8b       	std	Y+16, r18	; 0x10
     518:	0a 8b       	std	Y+18, r16	; 0x12
     51a:	fc 8a       	std	Y+20, r15	; 0x14
     51c:	eb 8a       	std	Y+19, r14	; 0x13
     51e:	de 8a       	std	Y+22, r13	; 0x16
     520:	cd 8a       	std	Y+21, r12	; 0x15
     522:	b8 8e       	std	Y+24, r11	; 0x18
     524:	af 8a       	std	Y+23, r10	; 0x17
     526:	89 8e       	std	Y+25, r8	; 0x19
	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
     528:	8f 89       	ldd	r24, Y+23	; 0x17
     52a:	98 8d       	ldd	r25, Y+24	; 0x18
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	29 f0       	breq	.+10     	; 0x53a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x4a>
     530:	8f 89       	ldd	r24, Y+23	; 0x17
     532:	98 8d       	ldd	r25, Y+24	; 0x18
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	01 c0       	rjmp	.+2      	; 0x53c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x4c>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	8c 83       	std	Y+4, r24	; 0x04
	byte bitFraming = (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
     53e:	89 8d       	ldd	r24, Y+25	; 0x19
     540:	98 2f       	mov	r25, r24
     542:	92 95       	swap	r25
     544:	90 7f       	andi	r25, 0xF0	; 240
     546:	8c 81       	ldd	r24, Y+4	; 0x04
     548:	89 0f       	add	r24, r25
     54a:	8d 83       	std	Y+5, r24	; 0x05
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
     54c:	8c 85       	ldd	r24, Y+12	; 0x0c
     54e:	9d 85       	ldd	r25, Y+13	; 0x0d
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	62 e0       	ldi	r22, 0x02	; 2
     554:	8a dd       	rcall	.-1260   	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
     556:	8c 85       	ldd	r24, Y+12	; 0x0c
     558:	9d 85       	ldd	r25, Y+13	; 0x0d
     55a:	4f e7       	ldi	r20, 0x7F	; 127
     55c:	68 e0       	ldi	r22, 0x08	; 8
     55e:	85 dd       	rcall	.-1270   	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFOLevelReg, 0x80);				// FlushBuffer = 1, FIFO initialization
     560:	8c 85       	ldd	r24, Y+12	; 0x0c
     562:	9d 85       	ldd	r25, Y+13	; 0x0d
     564:	40 e8       	ldi	r20, 0x80	; 128
     566:	64 e1       	ldi	r22, 0x14	; 20
     568:	80 dd       	rcall	.-1280   	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
     56a:	28 89       	ldd	r18, Y+16	; 0x10
     56c:	39 89       	ldd	r19, Y+17	; 0x11
     56e:	8c 85       	ldd	r24, Y+12	; 0x0c
     570:	9d 85       	ldd	r25, Y+13	; 0x0d
     572:	4a 89       	ldd	r20, Y+18	; 0x12
     574:	62 e1       	ldi	r22, 0x12	; 18
     576:	b3 dd       	rcall	.-1178   	; 0xde <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
     578:	8c 85       	ldd	r24, Y+12	; 0x0c
     57a:	9d 85       	ldd	r25, Y+13	; 0x0d
     57c:	4d 81       	ldd	r20, Y+5	; 0x05
     57e:	6a e1       	ldi	r22, 0x1A	; 26
     580:	74 dd       	rcall	.-1304   	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(CommandReg, command);				// Execute the command
     582:	8c 85       	ldd	r24, Y+12	; 0x0c
     584:	9d 85       	ldd	r25, Y+13	; 0x0d
     586:	4e 85       	ldd	r20, Y+14	; 0x0e
     588:	62 e0       	ldi	r22, 0x02	; 2
     58a:	6f dd       	rcall	.-1314   	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	if (command == PCD_Transceive) {
     58c:	8e 85       	ldd	r24, Y+14	; 0x0e
     58e:	8c 30       	cpi	r24, 0x0C	; 12
     590:	29 f4       	brne	.+10     	; 0x59c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xac>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
     592:	8c 85       	ldd	r24, Y+12	; 0x0c
     594:	9d 85       	ldd	r25, Y+13	; 0x0d
     596:	40 e8       	ldi	r20, 0x80	; 128
     598:	6a e1       	ldi	r22, 0x1A	; 26
     59a:	c6 de       	rcall	.-628    	; 0x328 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86μs.
	// TODO check/modify for other architectures than Arduino Uno 16bit
	uint16_t i;
	for (i = 2000; i > 0; i--) {
     59c:	80 ed       	ldi	r24, 0xD0	; 208
     59e:	97 e0       	ldi	r25, 0x07	; 7
     5a0:	9a 83       	std	Y+2, r25	; 0x02
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	19 c0       	rjmp	.+50     	; 0x5d8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe8>
		byte n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
     5a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5a8:	9d 85       	ldd	r25, Y+13	; 0x0d
     5aa:	68 e0       	ldi	r22, 0x08	; 8
     5ac:	e6 dd       	rcall	.-1076   	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     5ae:	8e 83       	std	Y+6, r24	; 0x06
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
     5b0:	9e 81       	ldd	r25, Y+6	; 0x06
     5b2:	8f 85       	ldd	r24, Y+15	; 0x0f
     5b4:	89 23       	and	r24, r25
     5b6:	88 23       	and	r24, r24
     5b8:	09 f0       	breq	.+2      	; 0x5bc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xcc>
			break;
     5ba:	12 c0       	rjmp	.+36     	; 0x5e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf0>
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
     5bc:	8e 81       	ldd	r24, Y+6	; 0x06
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	81 70       	andi	r24, 0x01	; 1
     5c4:	99 27       	eor	r25, r25
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	11 f0       	breq	.+4      	; 0x5ce <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xde>
			return STATUS_TIMEOUT;
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	b4 c0       	rjmp	.+360    	; 0x736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x246>
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86μs.
	// TODO check/modify for other architectures than Arduino Uno 16bit
	uint16_t i;
	for (i = 2000; i > 0; i--) {
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	9a 83       	std	Y+2, r25	; 0x02
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	19 f7       	brne	.-58     	; 0x5a6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb6>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
			return STATUS_TIMEOUT;
		}
	}
	// 35.7ms and nothing happend. Communication with the MFRC522 might be down.
	if (i == 0) {
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	11 f4       	brne	.+4      	; 0x5ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xfc>
		return STATUS_TIMEOUT;
     5e8:	83 e0       	ldi	r24, 0x03	; 3
     5ea:	a5 c0       	rjmp	.+330    	; 0x736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x246>
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
     5ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     5ee:	9d 85       	ldd	r25, Y+13	; 0x0d
     5f0:	6c e0       	ldi	r22, 0x0C	; 12
     5f2:	c3 dd       	rcall	.-1146   	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     5f4:	8f 83       	std	Y+7, r24	; 0x07
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
     5f6:	8f 81       	ldd	r24, Y+7	; 0x07
     5f8:	88 2f       	mov	r24, r24
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	83 71       	andi	r24, 0x13	; 19
     5fe:	99 27       	eor	r25, r25
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	11 f0       	breq	.+4      	; 0x608 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x118>
		return STATUS_ERROR;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	97 c0       	rjmp	.+302    	; 0x736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x246>
	}
  
	byte _validBits = 0;
     608:	1b 82       	std	Y+3, r1	; 0x03
	
	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
     60a:	8b 89       	ldd	r24, Y+19	; 0x13
     60c:	9c 89       	ldd	r25, Y+20	; 0x14
     60e:	00 97       	sbiw	r24, 0x00	; 0
     610:	71 f1       	breq	.+92     	; 0x66e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
     612:	8d 89       	ldd	r24, Y+21	; 0x15
     614:	9e 89       	ldd	r25, Y+22	; 0x16
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	51 f1       	breq	.+84     	; 0x66e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
		byte n = PCD_ReadRegister(FIFOLevelReg);	// Number of bytes in the FIFO
     61a:	8c 85       	ldd	r24, Y+12	; 0x0c
     61c:	9d 85       	ldd	r25, Y+13	; 0x0d
     61e:	64 e1       	ldi	r22, 0x14	; 20
     620:	ac dd       	rcall	.-1192   	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     622:	88 87       	std	Y+8, r24	; 0x08
		if (n > *backLen) {
     624:	8d 89       	ldd	r24, Y+21	; 0x15
     626:	9e 89       	ldd	r25, Y+22	; 0x16
     628:	fc 01       	movw	r30, r24
     62a:	90 81       	ld	r25, Z
     62c:	88 85       	ldd	r24, Y+8	; 0x08
     62e:	98 17       	cp	r25, r24
     630:	10 f4       	brcc	.+4      	; 0x636 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
			return STATUS_NO_ROOM;
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	80 c0       	rjmp	.+256    	; 0x736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x246>
		}
		*backLen = n;											// Number of bytes returned
     636:	8d 89       	ldd	r24, Y+21	; 0x15
     638:	9e 89       	ldd	r25, Y+22	; 0x16
     63a:	28 85       	ldd	r18, Y+8	; 0x08
     63c:	fc 01       	movw	r30, r24
     63e:	20 83       	st	Z, r18
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);	// Get received data from FIFO
     640:	2b 89       	ldd	r18, Y+19	; 0x13
     642:	3c 89       	ldd	r19, Y+20	; 0x14
     644:	8c 85       	ldd	r24, Y+12	; 0x0c
     646:	9d 85       	ldd	r25, Y+13	; 0x0d
     648:	09 8d       	ldd	r16, Y+25	; 0x19
     64a:	48 85       	ldd	r20, Y+8	; 0x08
     64c:	62 e1       	ldi	r22, 0x12	; 18
     64e:	d3 dd       	rcall	.-1114   	; 0x1f6 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;		// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
     650:	8c 85       	ldd	r24, Y+12	; 0x0c
     652:	9d 85       	ldd	r25, Y+13	; 0x0d
     654:	68 e1       	ldi	r22, 0x18	; 24
     656:	91 dd       	rcall	.-1246   	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     658:	87 70       	andi	r24, 0x07	; 7
     65a:	8b 83       	std	Y+3, r24	; 0x03
		if (validBits) {
     65c:	8f 89       	ldd	r24, Y+23	; 0x17
     65e:	98 8d       	ldd	r25, Y+24	; 0x18
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	29 f0       	breq	.+10     	; 0x66e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
			*validBits = _validBits;
     664:	8f 89       	ldd	r24, Y+23	; 0x17
     666:	98 8d       	ldd	r25, Y+24	; 0x18
     668:	2b 81       	ldd	r18, Y+3	; 0x03
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) {		// CollErr
     66e:	8f 81       	ldd	r24, Y+7	; 0x07
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	88 70       	andi	r24, 0x08	; 8
     676:	99 27       	eor	r25, r25
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	11 f0       	breq	.+4      	; 0x680 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x190>
		return STATUS_COLLISION;
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	5b c0       	rjmp	.+182    	; 0x736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x246>
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
     680:	8b 89       	ldd	r24, Y+19	; 0x13
     682:	9c 89       	ldd	r25, Y+20	; 0x14
     684:	00 97       	sbiw	r24, 0x00	; 0
     686:	09 f4       	brne	.+2      	; 0x68a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19a>
     688:	55 c0       	rjmp	.+170    	; 0x734 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
     68a:	8d 89       	ldd	r24, Y+21	; 0x15
     68c:	9e 89       	ldd	r25, Y+22	; 0x16
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	09 f4       	brne	.+2      	; 0x694 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a4>
     692:	50 c0       	rjmp	.+160    	; 0x734 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
     694:	8e a1       	ldd	r24, Y+38	; 0x26
     696:	88 23       	and	r24, r24
     698:	09 f4       	brne	.+2      	; 0x69c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ac>
     69a:	4c c0       	rjmp	.+152    	; 0x734 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
     69c:	8d 89       	ldd	r24, Y+21	; 0x15
     69e:	9e 89       	ldd	r25, Y+22	; 0x16
     6a0:	fc 01       	movw	r30, r24
     6a2:	80 81       	ld	r24, Z
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	29 f4       	brne	.+10     	; 0x6b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c2>
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	84 30       	cpi	r24, 0x04	; 4
     6ac:	11 f4       	brne	.+4      	; 0x6b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c2>
			return STATUS_MIFARE_NACK;
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	42 c0       	rjmp	.+132    	; 0x736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x246>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
     6b2:	8d 89       	ldd	r24, Y+21	; 0x15
     6b4:	9e 89       	ldd	r25, Y+22	; 0x16
     6b6:	fc 01       	movw	r30, r24
     6b8:	80 81       	ld	r24, Z
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	18 f0       	brcs	.+6      	; 0x6c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d4>
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	88 23       	and	r24, r24
     6c2:	11 f0       	breq	.+4      	; 0x6c8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
			return STATUS_CRC_WRONG;
     6c4:	87 e0       	ldi	r24, 0x07	; 7
     6c6:	37 c0       	rjmp	.+110    	; 0x736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x246>
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2];
		MFRC522::StatusCode status = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
     6c8:	8d 89       	ldd	r24, Y+21	; 0x15
     6ca:	9e 89       	ldd	r25, Y+22	; 0x16
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	4e ef       	ldi	r20, 0xFE	; 254
     6d2:	48 0f       	add	r20, r24
     6d4:	9e 01       	movw	r18, r28
     6d6:	26 5f       	subi	r18, 0xF6	; 246
     6d8:	3f 4f       	sbci	r19, 0xFF	; 255
     6da:	6b 89       	ldd	r22, Y+19	; 0x13
     6dc:	7c 89       	ldd	r23, Y+20	; 0x14
     6de:	8c 85       	ldd	r24, Y+12	; 0x0c
     6e0:	9d 85       	ldd	r25, Y+13	; 0x0d
     6e2:	5e de       	rcall	.-836    	; 0x3a0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
     6e4:	89 87       	std	Y+9, r24	; 0x09
		if (status != STATUS_OK) {
     6e6:	89 85       	ldd	r24, Y+9	; 0x09
     6e8:	88 23       	and	r24, r24
     6ea:	11 f0       	breq	.+4      	; 0x6f0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x200>
			return status;
     6ec:	89 85       	ldd	r24, Y+9	; 0x09
     6ee:	23 c0       	rjmp	.+70     	; 0x736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x246>
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
     6f0:	8d 89       	ldd	r24, Y+21	; 0x15
     6f2:	9e 89       	ldd	r25, Y+22	; 0x16
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z
     6f8:	88 2f       	mov	r24, r24
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	02 97       	sbiw	r24, 0x02	; 2
     6fe:	2b 89       	ldd	r18, Y+19	; 0x13
     700:	3c 89       	ldd	r19, Y+20	; 0x14
     702:	82 0f       	add	r24, r18
     704:	93 1f       	adc	r25, r19
     706:	fc 01       	movw	r30, r24
     708:	90 81       	ld	r25, Z
     70a:	8a 85       	ldd	r24, Y+10	; 0x0a
     70c:	98 17       	cp	r25, r24
     70e:	81 f4       	brne	.+32     	; 0x730 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x240>
     710:	8d 89       	ldd	r24, Y+21	; 0x15
     712:	9e 89       	ldd	r25, Y+22	; 0x16
     714:	fc 01       	movw	r30, r24
     716:	80 81       	ld	r24, Z
     718:	88 2f       	mov	r24, r24
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	2b 89       	ldd	r18, Y+19	; 0x13
     720:	3c 89       	ldd	r19, Y+20	; 0x14
     722:	82 0f       	add	r24, r18
     724:	93 1f       	adc	r25, r19
     726:	fc 01       	movw	r30, r24
     728:	90 81       	ld	r25, Z
     72a:	8b 85       	ldd	r24, Y+11	; 0x0b
     72c:	98 17       	cp	r25, r24
     72e:	11 f0       	breq	.+4      	; 0x734 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
			return STATUS_CRC_WRONG;
     730:	87 e0       	ldi	r24, 0x07	; 7
     732:	01 c0       	rjmp	.+2      	; 0x736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x246>
		}
	}
	
	return STATUS_OK;
     734:	80 e0       	ldi	r24, 0x00	; 0
} // End PCD_CommunicateWithPICC()
     736:	c7 5e       	subi	r28, 0xE7	; 231
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	8f 90       	pop	r8
     74e:	08 95       	ret

00000750 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_RequestA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	dd 27       	eor	r29, r29
     758:	c6 50       	subi	r28, 0x06	; 6
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	89 83       	std	Y+1, r24	; 0x01
     760:	7c 83       	std	Y+4, r23	; 0x04
     762:	6b 83       	std	Y+3, r22	; 0x03
     764:	5e 83       	std	Y+6, r21	; 0x06
     766:	4d 83       	std	Y+5, r20	; 0x05
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
     768:	2d 81       	ldd	r18, Y+5	; 0x05
     76a:	3e 81       	ldd	r19, Y+6	; 0x06
     76c:	4b 81       	ldd	r20, Y+3	; 0x03
     76e:	5c 81       	ldd	r21, Y+4	; 0x04
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	9a 81       	ldd	r25, Y+2	; 0x02
     774:	66 e2       	ldi	r22, 0x26	; 38
     776:	05 d0       	rcall	.+10     	; 0x782 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
} // End PICC_RequestA()
     778:	ca 5f       	subi	r28, 0xFA	; 250
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
     782:	af 92       	push	r10
     784:	cf 92       	push	r12
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	dd 27       	eor	r29, r29
     796:	c9 50       	subi	r28, 0x09	; 9
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	9c 83       	std	Y+4, r25	; 0x04
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	6d 83       	std	Y+5, r22	; 0x05
     7a0:	5f 83       	std	Y+7, r21	; 0x07
     7a2:	4e 83       	std	Y+6, r20	; 0x06
     7a4:	39 87       	std	Y+9, r19	; 0x09
     7a6:	28 87       	std	Y+8, r18	; 0x08
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
     7a8:	8e 81       	ldd	r24, Y+6	; 0x06
     7aa:	9f 81       	ldd	r25, Y+7	; 0x07
     7ac:	00 97       	sbiw	r24, 0x00	; 0
     7ae:	31 f0       	breq	.+12     	; 0x7bc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x3a>
     7b0:	88 85       	ldd	r24, Y+8	; 0x08
     7b2:	99 85       	ldd	r25, Y+9	; 0x09
     7b4:	fc 01       	movw	r30, r24
     7b6:	80 81       	ld	r24, Z
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	10 f4       	brcc	.+4      	; 0x7c0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x3e>
		return STATUS_NO_ROOM;
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	2a c0       	rjmp	.+84     	; 0x814 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x92>
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
     7c0:	8b 81       	ldd	r24, Y+3	; 0x03
     7c2:	9c 81       	ldd	r25, Y+4	; 0x04
     7c4:	40 e8       	ldi	r20, 0x80	; 128
     7c6:	6c e1       	ldi	r22, 0x1C	; 28
     7c8:	cc dd       	rcall	.-1128   	; 0x362 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
     7ca:	87 e0       	ldi	r24, 0x07	; 7
     7cc:	8a 83       	std	Y+2, r24	; 0x02
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
     7ce:	fe 01       	movw	r30, r28
     7d0:	32 96       	adiw	r30, 0x02	; 2
     7d2:	48 85       	ldd	r20, Y+8	; 0x08
     7d4:	59 85       	ldd	r21, Y+9	; 0x09
     7d6:	2e 81       	ldd	r18, Y+6	; 0x06
     7d8:	3f 81       	ldd	r19, Y+7	; 0x07
     7da:	be 01       	movw	r22, r28
     7dc:	6b 5f       	subi	r22, 0xFB	; 251
     7de:	7f 4f       	sbci	r23, 0xFF	; 255
     7e0:	8b 81       	ldd	r24, Y+3	; 0x03
     7e2:	9c 81       	ldd	r25, Y+4	; 0x04
     7e4:	a1 2c       	mov	r10, r1
     7e6:	c1 2c       	mov	r12, r1
     7e8:	7f 01       	movw	r14, r30
     7ea:	8a 01       	movw	r16, r20
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	3f de       	rcall	.-898    	; 0x46e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
     7f0:	89 83       	std	Y+1, r24	; 0x01
	if (status != STATUS_OK) {
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	88 23       	and	r24, r24
     7f6:	11 f0       	breq	.+4      	; 0x7fc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7a>
		return status;
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	0c c0       	rjmp	.+24     	; 0x814 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x92>
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
     7fc:	88 85       	ldd	r24, Y+8	; 0x08
     7fe:	99 85       	ldd	r25, Y+9	; 0x09
     800:	fc 01       	movw	r30, r24
     802:	80 81       	ld	r24, Z
     804:	82 30       	cpi	r24, 0x02	; 2
     806:	19 f4       	brne	.+6      	; 0x80e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x8c>
     808:	8a 81       	ldd	r24, Y+2	; 0x02
     80a:	88 23       	and	r24, r24
     80c:	11 f0       	breq	.+4      	; 0x812 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x90>
		return STATUS_ERROR;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	01 c0       	rjmp	.+2      	; 0x814 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x92>
	}
	return STATUS_OK;
     812:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_REQA_or_WUPA()
     814:	c7 5f       	subi	r28, 0xF7	; 247
     816:	cd bf       	out	0x3d, r28	; 61
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	cf 90       	pop	r12
     826:	af 90       	pop	r10
     828:	08 95       	ret

0000082a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
											byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
										 ) {
     82a:	af 92       	push	r10
     82c:	cf 92       	push	r12
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	dd 27       	eor	r29, r29
     83e:	c1 52       	subi	r28, 0x21	; 33
     840:	cd bf       	out	0x3d, r28	; 61
     842:	9e 8f       	std	Y+30, r25	; 0x1e
     844:	8d 8f       	std	Y+29, r24	; 0x1d
     846:	78 a3       	std	Y+32, r23	; 0x20
     848:	6f 8f       	std	Y+31, r22	; 0x1f
     84a:	49 a3       	std	Y+33, r20	; 0x21
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	byte cascadeLevel = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	8c 83       	std	Y+4, r24	; 0x04
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
     850:	89 a1       	ldd	r24, Y+33	; 0x21
     852:	81 35       	cpi	r24, 0x51	; 81
     854:	10 f0       	brcs	.+4      	; 0x85a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30>
		return STATUS_INVALID;
     856:	86 e0       	ldi	r24, 0x06	; 6
     858:	33 c2       	rjmp	.+1126   	; 0xcc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x496>
	}
	
	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
     85a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     85c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     85e:	40 e8       	ldi	r20, 0x80	; 128
     860:	6c e1       	ldi	r22, 0x1C	; 28
     862:	7f dd       	rcall	.-1282   	; 0x362 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	
	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
     864:	19 82       	std	Y+1, r1	; 0x01
	while (!uidComplete) {
     866:	1b c2       	rjmp	.+1078   	; 0xc9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
     868:	8c 81       	ldd	r24, Y+4	; 0x04
     86a:	88 2f       	mov	r24, r24
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	91 05       	cpc	r25, r1
     872:	b9 f0       	breq	.+46     	; 0x8a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x78>
     874:	83 30       	cpi	r24, 0x03	; 3
     876:	91 05       	cpc	r25, r1
     878:	31 f1       	breq	.+76     	; 0x8c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9c>
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	91 05       	cpc	r25, r1
     87e:	49 f5       	brne	.+82     	; 0x8d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
     880:	83 e9       	ldi	r24, 0x93	; 147
     882:	8a 8b       	std	Y+18, r24	; 0x12
				uidIndex = 0;
     884:	1f 82       	std	Y+7, r1	; 0x07
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
     886:	89 a1       	ldd	r24, Y+33	; 0x21
     888:	88 23       	and	r24, r24
     88a:	41 f0       	breq	.+16     	; 0x89c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x72>
     88c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     88e:	98 a1       	ldd	r25, Y+32	; 0x20
     890:	fc 01       	movw	r30, r24
     892:	80 81       	ld	r24, Z
     894:	85 30       	cpi	r24, 0x05	; 5
     896:	10 f0       	brcs	.+4      	; 0x89c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x72>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	01 c0       	rjmp	.+2      	; 0x89e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x74>
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	8b 83       	std	Y+3, r24	; 0x03
				break;
     8a0:	1a c0       	rjmp	.+52     	; 0x8d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xac>
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
     8a2:	85 e9       	ldi	r24, 0x95	; 149
     8a4:	8a 8b       	std	Y+18, r24	; 0x12
				uidIndex = 3;
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	8f 83       	std	Y+7, r24	; 0x07
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
     8aa:	89 a1       	ldd	r24, Y+33	; 0x21
     8ac:	88 23       	and	r24, r24
     8ae:	41 f0       	breq	.+16     	; 0x8c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x96>
     8b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b2:	98 a1       	ldd	r25, Y+32	; 0x20
     8b4:	fc 01       	movw	r30, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	88 30       	cpi	r24, 0x08	; 8
     8ba:	10 f0       	brcs	.+4      	; 0x8c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x96>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x98>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	8b 83       	std	Y+3, r24	; 0x03
				break;
     8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xac>
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
     8c6:	87 e9       	ldi	r24, 0x97	; 151
     8c8:	8a 8b       	std	Y+18, r24	; 0x12
				uidIndex = 6;
     8ca:	86 e0       	ldi	r24, 0x06	; 6
     8cc:	8f 83       	std	Y+7, r24	; 0x07
				useCascadeTag = false;						// Never used in CL3.
     8ce:	1b 82       	std	Y+3, r1	; 0x03
				break;
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xac>
			
			default:
				return STATUS_INTERNAL_ERROR;
     8d2:	85 e0       	ldi	r24, 0x05	; 5
     8d4:	f5 c1       	rjmp	.+1002   	; 0xcc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x496>
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
     8d6:	9f 81       	ldd	r25, Y+7	; 0x07
     8d8:	89 2f       	mov	r24, r25
     8da:	82 95       	swap	r24
     8dc:	88 0f       	add	r24, r24
     8de:	80 7e       	andi	r24, 0xE0	; 224
     8e0:	89 1b       	sub	r24, r25
     8e2:	88 0f       	add	r24, r24
     8e4:	88 0f       	add	r24, r24
     8e6:	88 0f       	add	r24, r24
     8e8:	89 1b       	sub	r24, r25
     8ea:	98 0f       	add	r25, r24
     8ec:	89 a1       	ldd	r24, Y+33	; 0x21
     8ee:	89 0f       	add	r24, r25
     8f0:	88 87       	std	Y+8, r24	; 0x08
		if (currentLevelKnownBits < 0) {
     8f2:	88 85       	ldd	r24, Y+8	; 0x08
     8f4:	88 23       	and	r24, r24
     8f6:	0c f4       	brge	.+2      	; 0x8fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd0>
			currentLevelKnownBits = 0;
     8f8:	18 86       	std	Y+8, r1	; 0x08
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	8e 83       	std	Y+6, r24	; 0x06
		if (useCascadeTag) {
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	88 23       	and	r24, r24
     902:	71 f0       	breq	.+28     	; 0x920 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf6>
			buffer[index++] = PICC_CMD_CT;
     904:	8e 81       	ldd	r24, Y+6	; 0x06
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	98 0f       	add	r25, r24
     90a:	9e 83       	std	Y+6, r25	; 0x06
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	9e 01       	movw	r18, r28
     912:	2e 5e       	subi	r18, 0xEE	; 238
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	82 0f       	add	r24, r18
     918:	93 1f       	adc	r25, r19
     91a:	28 e8       	ldi	r18, 0x88	; 136
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
     920:	88 85       	ldd	r24, Y+8	; 0x08
     922:	88 23       	and	r24, r24
     924:	0c f4       	brge	.+2      	; 0x928 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfe>
     926:	89 5f       	subi	r24, 0xF9	; 249
     928:	85 95       	asr	r24
     92a:	85 95       	asr	r24
     92c:	85 95       	asr	r24
     92e:	98 2f       	mov	r25, r24
     930:	88 85       	ldd	r24, Y+8	; 0x08
     932:	87 70       	andi	r24, 0x07	; 7
     934:	88 23       	and	r24, r24
     936:	11 f0       	breq	.+4      	; 0x93c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x112>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	01 c0       	rjmp	.+2      	; 0x93e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	89 0f       	add	r24, r25
     940:	8c 87       	std	Y+12, r24	; 0x0c
		if (bytesToCopy) {
     942:	8c 85       	ldd	r24, Y+12	; 0x0c
     944:	88 23       	and	r24, r24
     946:	99 f1       	breq	.+102    	; 0x9ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x184>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	88 23       	and	r24, r24
     94c:	11 f0       	breq	.+4      	; 0x952 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x128>
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	01 c0       	rjmp	.+2      	; 0x954 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	8e 87       	std	Y+14, r24	; 0x0e
			if (bytesToCopy > maxBytes) {
     956:	9c 85       	ldd	r25, Y+12	; 0x0c
     958:	8e 85       	ldd	r24, Y+14	; 0x0e
     95a:	89 17       	cp	r24, r25
     95c:	10 f4       	brcc	.+4      	; 0x962 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x138>
				bytesToCopy = maxBytes;
     95e:	8e 85       	ldd	r24, Y+14	; 0x0e
     960:	8c 87       	std	Y+12, r24	; 0x0c
			}
			for (count = 0; count < bytesToCopy; count++) {
     962:	1d 82       	std	Y+5, r1	; 0x05
     964:	20 c0       	rjmp	.+64     	; 0x9a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x17c>
				buffer[index++] = uid->uidByte[uidIndex + count];
     966:	8e 81       	ldd	r24, Y+6	; 0x06
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	98 0f       	add	r25, r24
     96c:	9e 83       	std	Y+6, r25	; 0x06
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	2f 81       	ldd	r18, Y+7	; 0x07
     974:	42 2f       	mov	r20, r18
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	2d 81       	ldd	r18, Y+5	; 0x05
     97a:	22 2f       	mov	r18, r18
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	24 0f       	add	r18, r20
     980:	35 1f       	adc	r19, r21
     982:	4f 8d       	ldd	r20, Y+31	; 0x1f
     984:	58 a1       	ldd	r21, Y+32	; 0x20
     986:	24 0f       	add	r18, r20
     988:	35 1f       	adc	r19, r21
     98a:	2f 5f       	subi	r18, 0xFF	; 255
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	f9 01       	movw	r30, r18
     990:	40 81       	ld	r20, Z
     992:	9e 01       	movw	r18, r28
     994:	2e 5e       	subi	r18, 0xEE	; 238
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	82 0f       	add	r24, r18
     99a:	93 1f       	adc	r25, r19
     99c:	fc 01       	movw	r30, r24
     99e:	40 83       	st	Z, r20
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
			if (bytesToCopy > maxBytes) {
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
     9a0:	8d 81       	ldd	r24, Y+5	; 0x05
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
     9a4:	8d 83       	std	Y+5, r24	; 0x05
     9a6:	9d 81       	ldd	r25, Y+5	; 0x05
     9a8:	8c 85       	ldd	r24, Y+12	; 0x0c
     9aa:	98 17       	cp	r25, r24
     9ac:	e0 f2       	brcs	.-72     	; 0x966 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
				buffer[index++] = uid->uidByte[uidIndex + count];
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	88 23       	and	r24, r24
     9b2:	19 f0       	breq	.+6      	; 0x9ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x190>
			currentLevelKnownBits += 8;
     9b4:	88 85       	ldd	r24, Y+8	; 0x08
     9b6:	88 5f       	subi	r24, 0xF8	; 248
     9b8:	88 87       	std	Y+8, r24	; 0x08
		}
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
     9ba:	1a 82       	std	Y+2, r1	; 0x02
		while (!selectDone) {
     9bc:	f4 c0       	rjmp	.+488    	; 0xba6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x37c>
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
     9be:	88 85       	ldd	r24, Y+8	; 0x08
     9c0:	80 32       	cpi	r24, 0x20	; 32
     9c2:	3c f1       	brlt	.+78     	; 0xa12 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e8>
				//Serial.print(F("SELECT: currentLevelKnownBits=")); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
     9c4:	80 e7       	ldi	r24, 0x70	; 112
     9c6:	8b 8b       	std	Y+19, r24	; 0x13
				// Calculate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
     9c8:	9c 89       	ldd	r25, Y+20	; 0x14
     9ca:	8d 89       	ldd	r24, Y+21	; 0x15
     9cc:	98 27       	eor	r25, r24
     9ce:	8e 89       	ldd	r24, Y+22	; 0x16
     9d0:	98 27       	eor	r25, r24
     9d2:	8f 89       	ldd	r24, Y+23	; 0x17
     9d4:	89 27       	eor	r24, r25
     9d6:	88 8f       	std	Y+24, r24	; 0x18
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
     9d8:	ce 01       	movw	r24, r28
     9da:	42 96       	adiw	r24, 0x12	; 18
     9dc:	9c 01       	movw	r18, r24
     9de:	29 5f       	subi	r18, 0xF9	; 249
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
     9e2:	be 01       	movw	r22, r28
     9e4:	6e 5e       	subi	r22, 0xEE	; 238
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
     9e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9ec:	47 e0       	ldi	r20, 0x07	; 7
     9ee:	d8 dc       	rcall	.-1616   	; 0x3a0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
     9f0:	8f 87       	std	Y+15, r24	; 0x0f
				if (result != STATUS_OK) {
     9f2:	8f 85       	ldd	r24, Y+15	; 0x0f
     9f4:	88 23       	and	r24, r24
     9f6:	11 f0       	breq	.+4      	; 0x9fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1d2>
					return result;
     9f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     9fa:	62 c1       	rjmp	.+708    	; 0xcc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x496>
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
     9fc:	1b 8e       	std	Y+27, r1	; 0x1b
				bufferUsed		= 9;
     9fe:	89 e0       	ldi	r24, 0x09	; 9
     a00:	89 87       	std	Y+9, r24	; 0x09
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
     a02:	ce 01       	movw	r24, r28
     a04:	42 96       	adiw	r24, 0x12	; 18
     a06:	06 96       	adiw	r24, 0x06	; 6
     a08:	9b 87       	std	Y+11, r25	; 0x0b
     a0a:	8a 87       	std	Y+10, r24	; 0x0a
				responseLength	= 3;
     a0c:	83 e0       	ldi	r24, 0x03	; 3
     a0e:	8c 8f       	std	Y+28, r24	; 0x1c
     a10:	33 c0       	rjmp	.+102    	; 0xa78 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24e>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print(F("ANTICOLLISION: currentLevelKnownBits=")); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
     a12:	88 85       	ldd	r24, Y+8	; 0x08
     a14:	87 78       	andi	r24, 0x87	; 135
     a16:	88 23       	and	r24, r24
     a18:	1c f4       	brge	.+6      	; 0xa20 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f6>
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	88 6f       	ori	r24, 0xF8	; 248
     a1e:	8f 5f       	subi	r24, 0xFF	; 255
     a20:	8b 8f       	std	Y+27, r24	; 0x1b
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
     a22:	88 85       	ldd	r24, Y+8	; 0x08
     a24:	88 23       	and	r24, r24
     a26:	0c f4       	brge	.+2      	; 0xa2a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
     a28:	89 5f       	subi	r24, 0xF9	; 249
     a2a:	85 95       	asr	r24
     a2c:	85 95       	asr	r24
     a2e:	85 95       	asr	r24
     a30:	8d 83       	std	Y+5, r24	; 0x05
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
     a32:	8d 81       	ldd	r24, Y+5	; 0x05
     a34:	8e 5f       	subi	r24, 0xFE	; 254
     a36:	8e 83       	std	Y+6, r24	; 0x06
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
     a38:	8e 81       	ldd	r24, Y+6	; 0x06
     a3a:	98 2f       	mov	r25, r24
     a3c:	92 95       	swap	r25
     a3e:	90 7f       	andi	r25, 0xF0	; 240
     a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a42:	89 0f       	add	r24, r25
     a44:	8b 8b       	std	Y+19, r24	; 0x13
				bufferUsed		= index + (txLastBits ? 1 : 0);
     a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a48:	88 23       	and	r24, r24
     a4a:	11 f0       	breq	.+4      	; 0xa50 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x226>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x228>
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	9e 81       	ldd	r25, Y+6	; 0x06
     a54:	89 0f       	add	r24, r25
     a56:	89 87       	std	Y+9, r24	; 0x09
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
     a58:	8e 81       	ldd	r24, Y+6	; 0x06
     a5a:	88 2f       	mov	r24, r24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	9e 01       	movw	r18, r28
     a60:	2e 5e       	subi	r18, 0xEE	; 238
     a62:	3f 4f       	sbci	r19, 0xFF	; 255
     a64:	82 0f       	add	r24, r18
     a66:	93 1f       	adc	r25, r19
     a68:	9b 87       	std	Y+11, r25	; 0x0b
     a6a:	8a 87       	std	Y+10, r24	; 0x0a
				responseLength	= sizeof(buffer) - index;
     a6c:	99 e0       	ldi	r25, 0x09	; 9
     a6e:	8e 81       	ldd	r24, Y+6	; 0x06
     a70:	f9 2f       	mov	r31, r25
     a72:	f8 1b       	sub	r31, r24
     a74:	8f 2f       	mov	r24, r31
     a76:	8c 8f       	std	Y+28, r24	; 0x1c
			}
			
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a separate variable is overkill. But it makes the next line easier to read.
     a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a7a:	88 8b       	std	Y+16, r24	; 0x10
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
     a7c:	88 89       	ldd	r24, Y+16	; 0x10
     a7e:	98 2f       	mov	r25, r24
     a80:	92 95       	swap	r25
     a82:	90 7f       	andi	r25, 0xF0	; 240
     a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a86:	29 2f       	mov	r18, r25
     a88:	28 0f       	add	r18, r24
     a8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a8e:	42 2f       	mov	r20, r18
     a90:	6a e1       	ldi	r22, 0x1A	; 26
     a92:	eb da       	rcall	.-2602   	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
			
			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);
     a94:	fe 01       	movw	r30, r28
     a96:	7b 96       	adiw	r30, 0x1b	; 27
     a98:	ae 01       	movw	r20, r28
     a9a:	44 5e       	subi	r20, 0xE4	; 228
     a9c:	5f 4f       	sbci	r21, 0xFF	; 255
     a9e:	2a 85       	ldd	r18, Y+10	; 0x0a
     aa0:	3b 85       	ldd	r19, Y+11	; 0x0b
     aa2:	be 01       	movw	r22, r28
     aa4:	6e 5e       	subi	r22, 0xEE	; 238
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     aaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     aac:	a1 2c       	mov	r10, r1
     aae:	c8 88       	ldd	r12, Y+16	; 0x10
     ab0:	7f 01       	movw	r14, r30
     ab2:	8a 01       	movw	r16, r20
     ab4:	49 85       	ldd	r20, Y+9	; 0x09
     ab6:	db dc       	rcall	.-1610   	; 0x46e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
     ab8:	8f 87       	std	Y+15, r24	; 0x0f
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
     aba:	8f 85       	ldd	r24, Y+15	; 0x0f
     abc:	82 30       	cpi	r24, 0x02	; 2
     abe:	09 f0       	breq	.+2      	; 0xac2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
     ac0:	65 c0       	rjmp	.+202    	; 0xb8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x362>
				byte valueOfCollReg = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
     ac2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ac4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ac6:	6c e1       	ldi	r22, 0x1C	; 28
     ac8:	58 db       	rcall	.-2384   	; 0x17a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
     aca:	89 8b       	std	Y+17, r24	; 0x11
				if (valueOfCollReg & 0x20) { // CollPosNotValid
     acc:	89 89       	ldd	r24, Y+17	; 0x11
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	80 72       	andi	r24, 0x20	; 32
     ad4:	99 27       	eor	r25, r25
     ad6:	00 97       	sbiw	r24, 0x00	; 0
     ad8:	11 f0       	breq	.+4      	; 0xade <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2b4>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	f1 c0       	rjmp	.+482    	; 0xcc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x496>
				}
				byte collisionPos = valueOfCollReg & 0x1F; // Values 0-31, 0 means bit 32.
     ade:	89 89       	ldd	r24, Y+17	; 0x11
     ae0:	8f 71       	andi	r24, 0x1F	; 31
     ae2:	8d 87       	std	Y+13, r24	; 0x0d
				if (collisionPos == 0) {
     ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ae6:	88 23       	and	r24, r24
     ae8:	11 f4       	brne	.+4      	; 0xaee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c4>
					collisionPos = 32;
     aea:	80 e2       	ldi	r24, 0x20	; 32
     aec:	8d 87       	std	Y+13, r24	; 0x0d
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
     aee:	8d 85       	ldd	r24, Y+13	; 0x0d
     af0:	28 2f       	mov	r18, r24
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	88 85       	ldd	r24, Y+8	; 0x08
     af6:	99 27       	eor	r25, r25
     af8:	87 fd       	sbrc	r24, 7
     afa:	90 95       	com	r25
     afc:	82 17       	cp	r24, r18
     afe:	93 07       	cpc	r25, r19
     b00:	14 f0       	brlt	.+4      	; 0xb06 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2dc>
					return STATUS_INTERNAL_ERROR;
     b02:	85 e0       	ldi	r24, 0x05	; 5
     b04:	dd c0       	rjmp	.+442    	; 0xcc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x496>
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits = collisionPos;
     b06:	8d 85       	ldd	r24, Y+13	; 0x0d
     b08:	88 87       	std	Y+8, r24	; 0x08
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
     b0a:	88 85       	ldd	r24, Y+8	; 0x08
     b0c:	99 27       	eor	r25, r25
     b0e:	87 fd       	sbrc	r24, 7
     b10:	90 95       	com	r25
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	87 70       	andi	r24, 0x07	; 7
     b16:	90 78       	andi	r25, 0x80	; 128
     b18:	99 23       	and	r25, r25
     b1a:	24 f4       	brge	.+8      	; 0xb24 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2fa>
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	88 6f       	ori	r24, 0xF8	; 248
     b20:	9f 6f       	ori	r25, 0xFF	; 255
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	8d 83       	std	Y+5, r24	; 0x05
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
     b26:	88 85       	ldd	r24, Y+8	; 0x08
     b28:	88 23       	and	r24, r24
     b2a:	0c f4       	brge	.+2      	; 0xb2e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x304>
     b2c:	89 5f       	subi	r24, 0xF9	; 249
     b2e:	85 95       	asr	r24
     b30:	85 95       	asr	r24
     b32:	85 95       	asr	r24
     b34:	98 2f       	mov	r25, r24
     b36:	8d 81       	ldd	r24, Y+5	; 0x05
     b38:	88 23       	and	r24, r24
     b3a:	11 f0       	breq	.+4      	; 0xb40 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x316>
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x318>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	89 0f       	add	r24, r25
     b44:	8f 5f       	subi	r24, 0xFF	; 255
     b46:	8e 83       	std	Y+6, r24	; 0x06
				buffer[index]	|= (1 << count);
     b48:	8e 81       	ldd	r24, Y+6	; 0x06
     b4a:	88 2f       	mov	r24, r24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	2e 81       	ldd	r18, Y+6	; 0x06
     b50:	22 2f       	mov	r18, r18
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	ae 01       	movw	r20, r28
     b56:	4e 5e       	subi	r20, 0xEE	; 238
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
     b5a:	24 0f       	add	r18, r20
     b5c:	35 1f       	adc	r19, r21
     b5e:	f9 01       	movw	r30, r18
     b60:	20 81       	ld	r18, Z
     b62:	62 2f       	mov	r22, r18
     b64:	2d 81       	ldd	r18, Y+5	; 0x05
     b66:	42 2f       	mov	r20, r18
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	21 e0       	ldi	r18, 0x01	; 1
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34a>
     b70:	22 0f       	add	r18, r18
     b72:	33 1f       	adc	r19, r19
     b74:	4a 95       	dec	r20
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x346>
     b78:	26 2b       	or	r18, r22
     b7a:	42 2f       	mov	r20, r18
     b7c:	9e 01       	movw	r18, r28
     b7e:	2e 5e       	subi	r18, 0xEE	; 238
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	82 0f       	add	r24, r18
     b84:	93 1f       	adc	r25, r19
     b86:	fc 01       	movw	r30, r24
     b88:	40 83       	st	Z, r20
     b8a:	0d c0       	rjmp	.+26     	; 0xba6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x37c>
			}
			else if (result != STATUS_OK) {
     b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8e:	88 23       	and	r24, r24
     b90:	11 f0       	breq	.+4      	; 0xb96 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36c>
				return result;
     b92:	8f 85       	ldd	r24, Y+15	; 0x0f
     b94:	95 c0       	rjmp	.+298    	; 0xcc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x496>
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
     b96:	88 85       	ldd	r24, Y+8	; 0x08
     b98:	80 32       	cpi	r24, 0x20	; 32
     b9a:	1c f0       	brlt	.+6      	; 0xba2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x378>
					selectDone = true; // No more anticollision 
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	8a 83       	std	Y+2, r24	; 0x02
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x37c>
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
     ba2:	80 e2       	ldi	r24, 0x20	; 32
     ba4:	88 87       	std	Y+8, r24	; 0x08
			currentLevelKnownBits += 8;
		}
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
		while (!selectDone) {
     ba6:	9a 81       	ldd	r25, Y+2	; 0x02
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	89 27       	eor	r24, r25
     bac:	88 23       	and	r24, r24
     bae:	09 f0       	breq	.+2      	; 0xbb2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x388>
     bb0:	06 cf       	rjmp	.-500    	; 0x9be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
		} // End of while (!selectDone)
		
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
     bb2:	8c 89       	ldd	r24, Y+20	; 0x14
     bb4:	88 38       	cpi	r24, 0x88	; 136
     bb6:	11 f4       	brne	.+4      	; 0xbbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x394>
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	8e 83       	std	Y+6, r24	; 0x06
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
     bc0:	8c 89       	ldd	r24, Y+20	; 0x14
     bc2:	88 38       	cpi	r24, 0x88	; 136
     bc4:	11 f4       	brne	.+4      	; 0xbca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a2>
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	8c 87       	std	Y+12, r24	; 0x0c
		for (count = 0; count < bytesToCopy; count++) {
     bce:	1d 82       	std	Y+5, r1	; 0x05
     bd0:	1f c0       	rjmp	.+62     	; 0xc10 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3e6>
			uid->uidByte[uidIndex + count] = buffer[index++];
     bd2:	8f 81       	ldd	r24, Y+7	; 0x07
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	8d 81       	ldd	r24, Y+5	; 0x05
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	82 0f       	add	r24, r18
     be0:	93 1f       	adc	r25, r19
     be2:	2e 81       	ldd	r18, Y+6	; 0x06
     be4:	31 e0       	ldi	r19, 0x01	; 1
     be6:	32 0f       	add	r19, r18
     be8:	3e 83       	std	Y+6, r19	; 0x06
     bea:	22 2f       	mov	r18, r18
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	ae 01       	movw	r20, r28
     bf0:	4e 5e       	subi	r20, 0xEE	; 238
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
     bf4:	24 0f       	add	r18, r20
     bf6:	35 1f       	adc	r19, r21
     bf8:	f9 01       	movw	r30, r18
     bfa:	40 81       	ld	r20, Z
     bfc:	2f 8d       	ldd	r18, Y+31	; 0x1f
     bfe:	38 a1       	ldd	r19, Y+32	; 0x20
     c00:	82 0f       	add	r24, r18
     c02:	93 1f       	adc	r25, r19
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	fc 01       	movw	r30, r24
     c08:	40 83       	st	Z, r20
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
		for (count = 0; count < bytesToCopy; count++) {
     c0a:	8d 81       	ldd	r24, Y+5	; 0x05
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	8d 83       	std	Y+5, r24	; 0x05
     c10:	9d 81       	ldd	r25, Y+5	; 0x05
     c12:	8c 85       	ldd	r24, Y+12	; 0x0c
     c14:	98 17       	cp	r25, r24
     c16:	e8 f2       	brcs	.-70     	; 0xbd2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a8>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) { // SAK must be exactly 24 bits (1 byte + CRC_A).
     c18:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c1a:	83 30       	cpi	r24, 0x03	; 3
     c1c:	19 f4       	brne	.+6      	; 0xc24 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fa>
     c1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c20:	88 23       	and	r24, r24
     c22:	11 f0       	breq	.+4      	; 0xc28 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fe>
			return STATUS_ERROR;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	4c c0       	rjmp	.+152    	; 0xcc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x496>
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
     c28:	ce 01       	movw	r24, r28
     c2a:	42 96       	adiw	r24, 0x12	; 18
     c2c:	9c 01       	movw	r18, r24
     c2e:	2e 5f       	subi	r18, 0xFE	; 254
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	6a 85       	ldd	r22, Y+10	; 0x0a
     c34:	7b 85       	ldd	r23, Y+11	; 0x0b
     c36:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c38:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	b1 db       	rcall	.-2206   	; 0x3a0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
     c3e:	8f 87       	std	Y+15, r24	; 0x0f
		if (result != STATUS_OK) {
     c40:	8f 85       	ldd	r24, Y+15	; 0x0f
     c42:	88 23       	and	r24, r24
     c44:	11 f0       	breq	.+4      	; 0xc4a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x420>
			return result;
     c46:	8f 85       	ldd	r24, Y+15	; 0x0f
     c48:	3b c0       	rjmp	.+118    	; 0xcc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x496>
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
     c4a:	2c 89       	ldd	r18, Y+20	; 0x14
     c4c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c4e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	28 17       	cp	r18, r24
     c58:	41 f4       	brne	.+16     	; 0xc6a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x440>
     c5a:	2d 89       	ldd	r18, Y+21	; 0x15
     c5c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c5e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c60:	02 96       	adiw	r24, 0x02	; 2
     c62:	fc 01       	movw	r30, r24
     c64:	80 81       	ld	r24, Z
     c66:	28 17       	cp	r18, r24
     c68:	11 f0       	breq	.+4      	; 0xc6e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x444>
			return STATUS_CRC_WRONG;
     c6a:	87 e0       	ldi	r24, 0x07	; 7
     c6c:	29 c0       	rjmp	.+82     	; 0xcc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x496>
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
     c6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c70:	9b 85       	ldd	r25, Y+11	; 0x0b
     c72:	fc 01       	movw	r30, r24
     c74:	80 81       	ld	r24, Z
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	84 70       	andi	r24, 0x04	; 4
     c7c:	99 27       	eor	r25, r25
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	21 f0       	breq	.+8      	; 0xc8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x460>
			cascadeLevel++;
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	8f 5f       	subi	r24, 0xFF	; 255
     c86:	8c 83       	std	Y+4, r24	; 0x04
     c88:	0a c0       	rjmp	.+20     	; 0xc9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
		}
		else {
			uidComplete = true;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	89 83       	std	Y+1, r24	; 0x01
			uid->sak = responseBuffer[0];
     c8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c90:	9b 85       	ldd	r25, Y+11	; 0x0b
     c92:	fc 01       	movw	r30, r24
     c94:	20 81       	ld	r18, Z
     c96:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c98:	98 a1       	ldd	r25, Y+32	; 0x20
     c9a:	fc 01       	movw	r30, r24
     c9c:	23 87       	std	Z+11, r18	; 0x0b
	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
	
	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
	while (!uidComplete) {
     c9e:	99 81       	ldd	r25, Y+1	; 0x01
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	89 27       	eor	r24, r25
     ca4:	88 23       	and	r24, r24
     ca6:	09 f0       	breq	.+2      	; 0xcaa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x480>
     ca8:	df cd       	rjmp	.-1090   	; 0x868 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3e>
			uid->sak = responseBuffer[0];
		}
	} // End of while (!uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
     caa:	9c 81       	ldd	r25, Y+4	; 0x04
     cac:	89 2f       	mov	r24, r25
     cae:	88 0f       	add	r24, r24
     cb0:	89 0f       	add	r24, r25
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	28 0f       	add	r18, r24
     cb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cb8:	98 a1       	ldd	r25, Y+32	; 0x20
     cba:	fc 01       	movw	r30, r24
     cbc:	20 83       	st	Z, r18

	return STATUS_OK;
     cbe:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_Select()
     cc0:	cf 5d       	subi	r28, 0xDF	; 223
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	cf 90       	pop	r12
     cd2:	af 90       	pop	r10
     cd4:	08 95       	ret

00000cd6 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	dd 27       	eor	r29, r29
     cde:	c6 50       	subi	r28, 0x06	; 6
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	9e 83       	std	Y+6, r25	; 0x06
     ce4:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	8c 83       	std	Y+4, r24	; 0x04

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
     cea:	8d 81       	ldd	r24, Y+5	; 0x05
     cec:	9e 81       	ldd	r25, Y+6	; 0x06
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	64 e2       	ldi	r22, 0x24	; 36
     cf2:	bb d9       	rcall	.-3210   	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	66 e2       	ldi	r22, 0x26	; 38
     cfc:	b6 d9       	rcall	.-3220   	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	46 e2       	ldi	r20, 0x26	; 38
     d04:	68 e4       	ldi	r22, 0x48	; 72
     d06:	b1 d9       	rcall	.-3230   	; 0x6a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
     d08:	ae 01       	movw	r20, r28
     d0a:	4c 5f       	subi	r20, 0xFC	; 252
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	9e 01       	movw	r18, r28
     d10:	2e 5f       	subi	r18, 0xFE	; 254
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	b9 01       	movw	r22, r18
     d1a:	1a dd       	rcall	.-1484   	; 0x750 <_ZN7MFRC52213PICC_RequestAEPhS0_>
     d1c:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	88 23       	and	r24, r24
     d22:	19 f0       	breq	.+6      	; 0xd2a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	82 30       	cpi	r24, 0x02	; 2
     d28:	11 f4       	brne	.+4      	; 0xd2e <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x58>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x5a>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
     d30:	ca 5f       	subi	r28, 0xFA	; 250
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	08 95       	ret

00000d3a <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	dd 27       	eor	r29, r29
     d42:	c3 50       	subi	r28, 0x03	; 3
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	9b 83       	std	Y+3, r25	; 0x03
     d48:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	9b 81       	ldd	r25, Y+3	; 0x03
     d4e:	fc 01       	movw	r30, r24
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	fc 01       	movw	r30, r24
     d56:	20 81       	ld	r18, Z
     d58:	31 81       	ldd	r19, Z+1	; 0x01
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	9b 81       	ldd	r25, Y+3	; 0x03
     d5e:	bc 01       	movw	r22, r24
     d60:	6e 5f       	subi	r22, 0xFE	; 254
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	9b 81       	ldd	r25, Y+3	; 0x03
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	f9 01       	movw	r30, r18
     d6c:	09 95       	icall
     d6e:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	99 81       	ldd	r25, Y+1	; 0x01
     d74:	99 23       	and	r25, r25
     d76:	09 f0       	breq	.+2      	; 0xd7a <_ZN7MFRC52219PICC_ReadCardSerialEv+0x40>
     d78:	80 e0       	ldi	r24, 0x00	; 0
} // End 
     d7a:	cd 5f       	subi	r28, 0xFD	; 253
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <_ZN8SPIClassC1Ev>:
 */

#include "SPIClass.h"


SPIClass::SPIClass() {
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	00 d0       	rcall	.+0      	; 0xd8a <_ZN8SPIClassC1Ev+0x6>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	dd 27       	eor	r29, r29
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
	// TODO Auto-generated constructor stub
	clkdiv = 10;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	2a e0       	ldi	r18, 0x0A	; 10
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18
}
     d9c:	ce 5f       	subi	r28, 0xFE	; 254
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <_ZN8SPIClassD1Ev>:
	clkdiv = 10;

}


SPIClass::~SPIClass() {
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	00 d0       	rcall	.+0      	; 0xdac <_ZN8SPIClassD1Ev+0x6>
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	dd 27       	eor	r29, r29
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
	// TODO Auto-generated destructor stub
	clkdiv = 0;
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	fc 01       	movw	r30, r24
     dba:	10 82       	st	Z, r1
}
     dbc:	ce 5f       	subi	r28, 0xFE	; 254
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <_ZN8SPIClass16beginTransactionE11SPISettings>:
void SPIClass::setDataMode(uint8_t spimode){mode = spimode;};
void SPIClass::setClockDivider(uint8_t div){clkdiv = div;};
void SPIClass::setBitOrder(uint8_t order){bitorder = order;};
*/

void SPIClass::beginTransaction(SPISettings settings){
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	dd 27       	eor	r29, r29
     dce:	c3 50       	subi	r28, 0x03	; 3
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	6b 83       	std	Y+3, r22	; 0x03
	mode = settings.clock;
     dd8:	2b 81       	ldd	r18, Y+3	; 0x03
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	fc 01       	movw	r30, r24
     de0:	21 83       	std	Z+1, r18	; 0x01
	bitorder = settings.clock;
     de2:	2b 81       	ldd	r18, Y+3	; 0x03
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	fc 01       	movw	r30, r24
     dea:	22 83       	std	Z+2, r18	; 0x02
	clkdiv = settings.clock;
     dec:	2b 81       	ldd	r18, Y+3	; 0x03
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18
};
     df6:	cd 5f       	subi	r28, 0xFD	; 253
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <_ZN8SPIClass8transferEh>:

int SPIClass::transfer(uint8_t val){
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	dd 27       	eor	r29, r29
     e08:	c3 50       	subi	r28, 0x03	; 3
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	9a 83       	std	Y+2, r25	; 0x02
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	6b 83       	std	Y+3, r22	; 0x03
	mode = 0;
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	fc 01       	movw	r30, r24
     e18:	11 82       	std	Z+1, r1	; 0x01
	return val;
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
};
     e20:	cd 5f       	subi	r28, 0xFD	; 253
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	08 95       	ret

00000e2a <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(){
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <_ZN8SPIClass14endTransactionEv+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	dd 27       	eor	r29, r29
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
	mode  =0;
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	fc 01       	movw	r30, r24
     e3e:	11 82       	std	Z+1, r1	; 0x01
};
     e40:	ce 5f       	subi	r28, 0xFE	; 254
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	08 95       	ret

00000e4a <_ZN11SPISettingsC1Ehhh>:
#define SPI_MODE0 0

class SPISettings{
public:
	//SPI_CLOCK_DIV4, MSBFIRST, SPI_MODE0
	SPISettings(uint8_t clock_div, uint8_t byteorder, uint8_t mode){
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	dd 27       	eor	r29, r29
     e52:	c5 50       	subi	r28, 0x05	; 5
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	6b 83       	std	Y+3, r22	; 0x03
     e5c:	4c 83       	std	Y+4, r20	; 0x04
     e5e:	2d 83       	std	Y+5, r18	; 0x05
		clock = 8;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	28 e0       	ldi	r18, 0x08	; 8
     e66:	fc 01       	movw	r30, r24
     e68:	20 83       	st	Z, r18
	};
     e6a:	cb 5f       	subi	r28, 0xFB	; 251
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	08 95       	ret

00000e74 <_ZN8SPIClass11setDataModeEh>:

class SPIClass {
public:
	SPIClass();
	SPIClass(SPISettings &spiConfig);
	void setDataMode(uint8_t spimode){mode = spimode;};
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	dd 27       	eor	r29, r29
     e7c:	c3 50       	subi	r28, 0x03	; 3
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6b 83       	std	Y+3, r22	; 0x03
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	2b 81       	ldd	r18, Y+3	; 0x03
     e8c:	fc 01       	movw	r30, r24
     e8e:	21 83       	std	Z+1, r18	; 0x01
     e90:	cd 5f       	subi	r28, 0xFD	; 253
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <_ZN7MFRC522C1EhhP8SPIClass11SPISettings>:
	Uid uid;	// Used by PICC_ReadCardSerial().
	
	/////////////////////////////////////////////////////////////////////////////////////
	// Functions for setting up the Arduino
	/////////////////////////////////////////////////////////////////////////////////////
	MFRC522(const byte chipSelectPin, const byte resetPowerDownPin,
     e9a:	0f 93       	push	r16
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	dd 27       	eor	r29, r29
     ea4:	c7 50       	subi	r28, 0x07	; 7
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	6b 83       	std	Y+3, r22	; 0x03
     eae:	4c 83       	std	Y+4, r20	; 0x04
     eb0:	3e 83       	std	Y+6, r19	; 0x06
     eb2:	2d 83       	std	Y+5, r18	; 0x05
     eb4:	0f 83       	std	Y+7, r16	; 0x07
			SPIClass *spiClass = &SPI, const SPISettings spiSettings = SPISettings(SPI_CLOCK_DIV8, MSBFIRST, SPI_MODE0))
			: _chipSelectPin(chipSelectPin), _resetPowerDownPin(resetPowerDownPin),
			  _spiClass(spiClass), _spiSettings(spiSettings) {};
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	24 e6       	ldi	r18, 0x64	; 100
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	fc 01       	movw	r30, r24
     ec0:	31 83       	std	Z+1, r19	; 0x01
     ec2:	20 83       	st	Z, r18
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	2b 81       	ldd	r18, Y+3	; 0x03
     eca:	fc 01       	movw	r30, r24
     ecc:	26 87       	std	Z+14, r18	; 0x0e
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	2c 81       	ldd	r18, Y+4	; 0x04
     ed4:	fc 01       	movw	r30, r24
     ed6:	27 87       	std	Z+15, r18	; 0x0f
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	2d 81       	ldd	r18, Y+5	; 0x05
     ede:	3e 81       	ldd	r19, Y+6	; 0x06
     ee0:	fc 01       	movw	r30, r24
     ee2:	31 8b       	std	Z+17, r19	; 0x11
     ee4:	20 8b       	std	Z+16, r18	; 0x10
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	42 96       	adiw	r24, 0x12	; 18
     eec:	2f 81       	ldd	r18, Y+7	; 0x07
     eee:	fc 01       	movw	r30, r24
     ef0:	20 83       	st	Z, r18
     ef2:	c9 5f       	subi	r28, 0xF9	; 249
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	0f 91       	pop	r16
     efc:	08 95       	ret

00000efe <main>:

//MFRC522::MIFARE_Key key;

SPIClass SPI;

int main(){
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	dd 27       	eor	r29, r29

	//void setSPIConfig();
	SPI.setDataMode(10);
     f06:	6a e0       	ldi	r22, 0x0A	; 10
     f08:	8d e7       	ldi	r24, 0x7D	; 125
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	b3 df       	rcall	.-154    	; 0xe74 <_ZN8SPIClass11setDataModeEh>
}
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <_Z41__static_initialization_and_destruction_0ii>:
     f18:	0f 93       	push	r16
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	dd 27       	eor	r29, r29
     f22:	c5 50       	subi	r28, 0x05	; 5
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	9b 83       	std	Y+3, r25	; 0x03
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	7d 83       	std	Y+5, r23	; 0x05
     f2c:	6c 83       	std	Y+4, r22	; 0x04
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	9b 81       	ldd	r25, Y+3	; 0x03
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	b9 f4       	brne	.+46     	; 0xf66 <_Z41__static_initialization_and_destruction_0ii+0x4e>
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	9d 81       	ldd	r25, Y+5	; 0x05
     f3c:	8f 3f       	cpi	r24, 0xFF	; 255
     f3e:	2f ef       	ldi	r18, 0xFF	; 255
     f40:	92 07       	cpc	r25, r18
     f42:	89 f4       	brne	.+34     	; 0xf66 <_Z41__static_initialization_and_destruction_0ii+0x4e>
#include "MFRC522.h"

constexpr uint8_t RST_PIN = 9;     // Configurable, see typical pin layout above
constexpr uint8_t SS_PIN = 10;     // Configurable, see typical pin layout above

MFRC522 testObject(SS_PIN, RST_PIN);
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	68 e0       	ldi	r22, 0x08	; 8
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	7d df       	rcall	.-262    	; 0xe4a <_ZN11SPISettingsC1Ehhh>
     f50:	09 81       	ldd	r16, Y+1	; 0x01
     f52:	2d e7       	ldi	r18, 0x7D	; 125
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	49 e0       	ldi	r20, 0x09	; 9
     f58:	6a e0       	ldi	r22, 0x0A	; 10
     f5a:	8a e6       	ldi	r24, 0x6A	; 106
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9d df       	rcall	.-198    	; 0xe9a <_ZN7MFRC522C1EhhP8SPIClass11SPISettings>


//MFRC522::MIFARE_Key key;

SPIClass SPI;
     f60:	8d e7       	ldi	r24, 0x7D	; 125
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0f df       	rcall	.-482    	; 0xd84 <_ZN8SPIClassC1Ev>
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	49 f4       	brne	.+18     	; 0xf80 <_Z41__static_initialization_and_destruction_0ii+0x68>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	8f 3f       	cpi	r24, 0xFF	; 255
     f74:	2f ef       	ldi	r18, 0xFF	; 255
     f76:	92 07       	cpc	r25, r18
     f78:	19 f4       	brne	.+6      	; 0xf80 <_Z41__static_initialization_and_destruction_0ii+0x68>
     f7a:	8d e7       	ldi	r24, 0x7D	; 125
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	13 df       	rcall	.-474    	; 0xda6 <_ZN8SPIClassD1Ev>

int main(){

	//void setSPIConfig();
	SPI.setDataMode(10);
}
     f80:	cb 5f       	subi	r28, 0xFB	; 251
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	0f 91       	pop	r16
     f8a:	08 95       	ret

00000f8c <_GLOBAL__sub_I_testObject>:
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	dd 27       	eor	r29, r29
     f94:	6f ef       	ldi	r22, 0xFF	; 255
     f96:	7f ef       	ldi	r23, 0xFF	; 255
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	bd df       	rcall	.-134    	; 0xf18 <_Z41__static_initialization_and_destruction_0ii>
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <_GLOBAL__sub_D_testObject>:
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	dd 27       	eor	r29, r29
     fac:	6f ef       	ldi	r22, 0xFF	; 255
     fae:	7f ef       	ldi	r23, 0xFF	; 255
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	b1 df       	rcall	.-158    	; 0xf18 <_Z41__static_initialization_and_destruction_0ii>
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <_Z12digitalWritehh>:
 */

#include <avr/io.h>
#include "wrapper_arduino.h"

void digitalWrite(uint8_t pin, uint8_t val){
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <_Z12digitalWritehh+0x6>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	dd 27       	eor	r29, r29
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	6a 83       	std	Y+2, r22	; 0x02
	if (val == 1)
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	b1 f4       	brne	.+44     	; 0xffc <_Z12digitalWritehh+0x40>
		PORTB |= _BV(val);
     fd0:	88 e3       	ldi	r24, 0x38	; 56
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	28 e3       	ldi	r18, 0x38	; 56
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	f9 01       	movw	r30, r18
     fda:	20 81       	ld	r18, Z
     fdc:	62 2f       	mov	r22, r18
     fde:	2a 81       	ldd	r18, Y+2	; 0x02
     fe0:	42 2f       	mov	r20, r18
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	04 2e       	mov	r0, r20
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <_Z12digitalWritehh+0x34>
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <_Z12digitalWritehh+0x30>
     ff4:	26 2b       	or	r18, r22
     ff6:	fc 01       	movw	r30, r24
     ff8:	20 83       	st	Z, r18
     ffa:	16 c0       	rjmp	.+44     	; 0x1028 <_Z12digitalWritehh+0x6c>
	else
		PORTB &= ~_BV(val);
     ffc:	88 e3       	ldi	r24, 0x38	; 56
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	28 e3       	ldi	r18, 0x38	; 56
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	f9 01       	movw	r30, r18
    1006:	20 81       	ld	r18, Z
    1008:	62 2f       	mov	r22, r18
    100a:	2a 81       	ldd	r18, Y+2	; 0x02
    100c:	42 2f       	mov	r20, r18
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	21 e0       	ldi	r18, 0x01	; 1
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	04 2e       	mov	r0, r20
    1016:	02 c0       	rjmp	.+4      	; 0x101c <_Z12digitalWritehh+0x60>
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <_Z12digitalWritehh+0x5c>
    1020:	20 95       	com	r18
    1022:	26 23       	and	r18, r22
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
};
    1028:	ce 5f       	subi	r28, 0xFE	; 254
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <__tablejump2__>:
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	05 90       	lpm	r0, Z+
    1038:	f4 91       	lpm	r31, Z
    103a:	e0 2d       	mov	r30, r0
    103c:	09 94       	ijmp

0000103e <__do_global_dtors>:
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	c0 e1       	ldi	r28, 0x10	; 16
    1042:	d0 e0       	ldi	r29, 0x00	; 0
    1044:	03 c0       	rjmp	.+6      	; 0x104c <__do_global_dtors+0xe>
    1046:	fe 01       	movw	r30, r28
    1048:	f4 df       	rcall	.-24     	; 0x1032 <__tablejump2__>
    104a:	21 96       	adiw	r28, 0x01	; 1
    104c:	c1 31       	cpi	r28, 0x11	; 17
    104e:	d1 07       	cpc	r29, r17
    1050:	d1 f7       	brne	.-12     	; 0x1046 <__do_global_dtors+0x8>
    1052:	f8 94       	cli

00001054 <__stop_program>:
    1054:	ff cf       	rjmp	.-2      	; 0x1054 <__stop_program>
